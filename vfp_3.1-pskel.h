// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef VFP_3_1_PSKEL_HXX
#define VFP_3_1_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Forward declarations
//
namespace vfp
{
  class coordinateAttrType_pskel;
  class coordinateType_pskel;
  class polygonType_pskel;
  class linpol_pskel;
  class linearType_pskel;
  class circle_pskel;
  class solidType_pskel;
  class holeCollectionType_pskel;
  class regionType_pskel;
  class segmentType_pskel;
  class se_pskel;
  class ar_pskel;
  class radiusAttrType_pskel;
  class rotationAttrType_pskel;
  class justificationAttrType_pskel;
  class heightAttrType_pskel;
  class widthAttrType_pskel;
  class valueAttrType_pskel;
  class textType_pskel;
  class cellType_pskel;
  class cadasterCodeType_pskel;
  class lvNumberAttrType_pskel;
  class numeratorType_pskel;
  class denominatorType_pskel;
  class areaAttrType_pskel;
  class priceAttrType_pskel;
  class distanceType_pskel;
  class notEmptyStringType_pskel;
  class opsubIdType_pskel;
  class bpejType_pskel;
  class bpejCodeAttrType_pskel;
  class birthNumberType_pskel;
  class streetNumberType_pskel;
  class orientationNumberType_pskel;
  class postCodeType_pskel;
  class emailType_pskel;
  class icoType_pskel;
  class koeficientType_pskel;
  class participantType_pskel;
  class basicIdAttrType_pskel;
  class kindOfUseAttrType_pskel;
  class kindOfAreaAttrType_pskel;
  class basicStringIdAttrType_pskel;
  class participantIdAttrType_pskel;
  class parcelIdAttrType_pskel;
  class noteAttrType_pskel;
  class outsideParcelType_pskel;
  class newNumberType_pskel;
  class newNumberCollectionType_pskel;
  class pneresType_pskel;
  class ochrType_pskel;
  class typPravAttrType_pskel;
  class bremenoType_pskel;
  class bremCollectionType_pskel;
  class nvlaType_pskel;
  class nvlaCollectionType_pskel;
  class vlaCollectionType_pskel;
  class participantReferenceType_pskel;
  class druhCislovaniNumberAttrType_pskel;
  class parcelNumberAttrType_pskel;
  class poddeleniNumberAttrType_pskel;
  class resAttrType_pskel;
  class rusAttrType_pskel;
  class cirAttrType_pskel;
  class soucAttrType_pskel;
  class vysAttrType_pskel;
  class navrhPhaseType_pskel;
  class navrhType_pskel;
  class bpejCollectionType_pskel;
  class claimBpejCollectionType_pskel;
  class areaKindLabelAttrType_pskel;
  class porostPartTypeBase_pskel;
  class solPart_pskel;
  class znaPart_pskel;
  class porPart_pskel;
  class porCollectionType_pskel;
  class areaType_pskel;
  class ucaCollectionType_pskel;
  class gparType_pskel;
  class narokType_pskel;
  class ucaType_pskel;
  class ucastniciType_pskel;
  class graphicElementCodeType_pskel;
  class mdpType_pskel;
  class plin_pskel;
  class pzna_pskel;
  class ptext_pskel;
  class parea_pskel;
  class psouType_pskel;
  class zsType_pskel;
  class pmType_pskel;
  class mpType_pskel;
  class meosType_pskel;
  class meonType_pskel;
  class hvpszType_pskel;
  class zvbodsType_pskel;
  class zvlinsType_pskel;
  class zvareasType_pskel;
  class souType_pskel;
  class opuType_pskel;
  class porostType_pskel;
  class sol_pskel;
  class por_pskel;
  class stageType_pskel;
  class landConsType_pskel;
  class ocvType_pskel;
  class versionType_pskel;
  class headerType_pskel;
  class pbremCollectionType_pskel;
  class spozCollectionType_pskel;
  class vfpType_pskel;
  class pa_pskel;
  class pa1_pskel;
  class dil_pskel;
  class vla_pskel;
  class lv_pskel;
  class dil1_pskel;
  class dil2_pskel;
  class lv1_pskel;
  class pl_pskel;
  class plins_pskel;
  class pznas_pskel;
  class ptexts_pskel;
  class psour_pskel;
  class pmlins_pskel;
  class pmznas_pskel;
  class pmtexts_pskel;
  class pmareas_pskel;
  class mplins_pskel;
  class mpznas_pskel;
  class mptexts_pskel;
  class mpareas_pskel;
  class meoslins_pskel;
  class meosznas_pskel;
  class meostexts_pskel;
  class meosareas_pskel;
  class meonlins_pskel;
  class meonznas_pskel;
  class meontexts_pskel;
  class meonareas_pskel;
  class hvpszlins_pskel;
  class hvpszznas_pskel;
  class hvpsztexts_pskel;
  class hvpszareas_pskel;
  class zvbod_pskel;
  class zvlin_pskel;
  class zvarea_pskel;
  class pl1_pskel;
  class pl2_pskel;
  class pl3_pskel;
  class bpej_pskel;
  class bpejr2_pskel;
  class por1_pskel;
  class zv_pskel;
  class par_pskel;
  class par1_pskel;
  class sour_pskel;
  class pl4_pskel;
  class pl5_pskel;
  class pa2_pskel;
  class pa3_pskel;
}


#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_PARSER_USE_CHAR
#define XSD_CXX_PARSER_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>
#include <xsd/cxx/xml/error-handler.hxx>
#include <xsd/cxx/parser/exceptions.hxx>
#include <xsd/cxx/parser/elements.hxx>
#include <xsd/cxx/parser/xml-schema.hxx>
#include <xsd/cxx/parser/non-validating/parser.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pskel.hxx>
#include <xsd/cxx/parser/non-validating/xml-schema-pimpl.hxx>
#include <xsd/cxx/parser/xerces/elements.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  typedef ::xsd::cxx::parser::string_sequence< char > string_sequence;
  typedef ::xsd::cxx::parser::qname< char > qname;
  typedef ::xsd::cxx::parser::buffer buffer;
  typedef ::xsd::cxx::parser::time_zone time_zone;
  typedef ::xsd::cxx::parser::gday gday;
  typedef ::xsd::cxx::parser::gmonth gmonth;
  typedef ::xsd::cxx::parser::gyear gyear;
  typedef ::xsd::cxx::parser::gmonth_day gmonth_day;
  typedef ::xsd::cxx::parser::gyear_month gyear_month;
  typedef ::xsd::cxx::parser::date date;
  typedef ::xsd::cxx::parser::time time;
  typedef ::xsd::cxx::parser::date_time date_time;
  typedef ::xsd::cxx::parser::duration duration;

  // Base parser skeletons.
  //
  typedef ::xsd::cxx::parser::parser_base< char > parser_base;
  typedef ::xsd::cxx::parser::non_validating::empty_content< char > empty_content;
  typedef ::xsd::cxx::parser::non_validating::simple_content< char > simple_content;
  typedef ::xsd::cxx::parser::non_validating::complex_content< char > complex_content;
  typedef ::xsd::cxx::parser::non_validating::list_base< char > list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  typedef ::xsd::cxx::parser::non_validating::any_type_pskel< char > any_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_type_pimpl< char > any_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pskel< char > any_simple_type_pskel;
  typedef ::xsd::cxx::parser::non_validating::any_simple_type_pimpl< char > any_simple_type_pimpl;

  typedef ::xsd::cxx::parser::non_validating::byte_pskel< char > byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::byte_pimpl< char > byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pskel< char > unsigned_byte_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_byte_pimpl< char > unsigned_byte_pimpl;

  typedef ::xsd::cxx::parser::non_validating::short_pskel< char > short_pskel;
  typedef ::xsd::cxx::parser::non_validating::short_pimpl< char > short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pskel< char > unsigned_short_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_short_pimpl< char > unsigned_short_pimpl;

  typedef ::xsd::cxx::parser::non_validating::int_pskel< char > int_pskel;
  typedef ::xsd::cxx::parser::non_validating::int_pimpl< char > int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pskel< char > unsigned_int_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_int_pimpl< char > unsigned_int_pimpl;

  typedef ::xsd::cxx::parser::non_validating::long_pskel< char > long_pskel;
  typedef ::xsd::cxx::parser::non_validating::long_pimpl< char > long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pskel< char > unsigned_long_pskel;
  typedef ::xsd::cxx::parser::non_validating::unsigned_long_pimpl< char > unsigned_long_pimpl;

  typedef ::xsd::cxx::parser::non_validating::integer_pskel< char > integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::integer_pimpl< char > integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pskel< char > non_positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_positive_integer_pimpl< char > non_positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pskel< char > non_negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::non_negative_integer_pimpl< char > non_negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::positive_integer_pskel< char > positive_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::positive_integer_pimpl< char > positive_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::negative_integer_pskel< char > negative_integer_pskel;
  typedef ::xsd::cxx::parser::non_validating::negative_integer_pimpl< char > negative_integer_pimpl;

  typedef ::xsd::cxx::parser::non_validating::boolean_pskel< char > boolean_pskel;
  typedef ::xsd::cxx::parser::non_validating::boolean_pimpl< char > boolean_pimpl;

  typedef ::xsd::cxx::parser::non_validating::float_pskel< char > float_pskel;
  typedef ::xsd::cxx::parser::non_validating::float_pimpl< char > float_pimpl;

  typedef ::xsd::cxx::parser::non_validating::double_pskel< char > double_pskel;
  typedef ::xsd::cxx::parser::non_validating::double_pimpl< char > double_pimpl;

  typedef ::xsd::cxx::parser::non_validating::decimal_pskel< char > decimal_pskel;
  typedef ::xsd::cxx::parser::non_validating::decimal_pimpl< char > decimal_pimpl;

  typedef ::xsd::cxx::parser::non_validating::string_pskel< char > string_pskel;
  typedef ::xsd::cxx::parser::non_validating::string_pimpl< char > string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::normalized_string_pskel< char > normalized_string_pskel;
  typedef ::xsd::cxx::parser::non_validating::normalized_string_pimpl< char > normalized_string_pimpl;

  typedef ::xsd::cxx::parser::non_validating::token_pskel< char > token_pskel;
  typedef ::xsd::cxx::parser::non_validating::token_pimpl< char > token_pimpl;

  typedef ::xsd::cxx::parser::non_validating::name_pskel< char > name_pskel;
  typedef ::xsd::cxx::parser::non_validating::name_pimpl< char > name_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtoken_pskel< char > nmtoken_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtoken_pimpl< char > nmtoken_pimpl;

  typedef ::xsd::cxx::parser::non_validating::nmtokens_pskel< char > nmtokens_pskel;
  typedef ::xsd::cxx::parser::non_validating::nmtokens_pimpl< char > nmtokens_pimpl;

  typedef ::xsd::cxx::parser::non_validating::ncname_pskel< char > ncname_pskel;
  typedef ::xsd::cxx::parser::non_validating::ncname_pimpl< char > ncname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::language_pskel< char > language_pskel;
  typedef ::xsd::cxx::parser::non_validating::language_pimpl< char > language_pimpl;

  typedef ::xsd::cxx::parser::non_validating::id_pskel< char > id_pskel;
  typedef ::xsd::cxx::parser::non_validating::id_pimpl< char > id_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idref_pskel< char > idref_pskel;
  typedef ::xsd::cxx::parser::non_validating::idref_pimpl< char > idref_pimpl;

  typedef ::xsd::cxx::parser::non_validating::idrefs_pskel< char > idrefs_pskel;
  typedef ::xsd::cxx::parser::non_validating::idrefs_pimpl< char > idrefs_pimpl;

  typedef ::xsd::cxx::parser::non_validating::uri_pskel< char > uri_pskel;
  typedef ::xsd::cxx::parser::non_validating::uri_pimpl< char > uri_pimpl;

  typedef ::xsd::cxx::parser::non_validating::qname_pskel< char > qname_pskel;
  typedef ::xsd::cxx::parser::non_validating::qname_pimpl< char > qname_pimpl;

  typedef ::xsd::cxx::parser::non_validating::base64_binary_pskel< char > base64_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::base64_binary_pimpl< char > base64_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::hex_binary_pskel< char > hex_binary_pskel;
  typedef ::xsd::cxx::parser::non_validating::hex_binary_pimpl< char > hex_binary_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_pskel< char > date_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_pimpl< char > date_pimpl;

  typedef ::xsd::cxx::parser::non_validating::date_time_pskel< char > date_time_pskel;
  typedef ::xsd::cxx::parser::non_validating::date_time_pimpl< char > date_time_pimpl;

  typedef ::xsd::cxx::parser::non_validating::duration_pskel< char > duration_pskel;
  typedef ::xsd::cxx::parser::non_validating::duration_pimpl< char > duration_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gday_pskel< char > gday_pskel;
  typedef ::xsd::cxx::parser::non_validating::gday_pimpl< char > gday_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_pskel< char > gmonth_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_pimpl< char > gmonth_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pskel< char > gmonth_day_pskel;
  typedef ::xsd::cxx::parser::non_validating::gmonth_day_pimpl< char > gmonth_day_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_pskel< char > gyear_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_pimpl< char > gyear_pimpl;

  typedef ::xsd::cxx::parser::non_validating::gyear_month_pskel< char > gyear_month_pskel;
  typedef ::xsd::cxx::parser::non_validating::gyear_month_pimpl< char > gyear_month_pimpl;

  typedef ::xsd::cxx::parser::non_validating::time_pskel< char > time_pskel;
  typedef ::xsd::cxx::parser::non_validating::time_pimpl< char > time_pimpl;

  // Exceptions. See libxsd/xsd/cxx/parser/exceptions.hxx for details.
  //
  typedef ::xsd::cxx::parser::exception< char > exception;

  // Parsing diagnostics.
  //
  typedef ::xsd::cxx::parser::severity severity;
  typedef ::xsd::cxx::parser::error< char > error;
  typedef ::xsd::cxx::parser::diagnostics< char > diagnostics;
  typedef ::xsd::cxx::parser::parsing< char > parsing;

  // Error handler. See libxsd/xsd/cxx/xml/error-handler.hxx for details.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // Read-only string.
  //
  typedef ::xsd::cxx::ro_string< char > ro_string;

  // Parsing flags. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::flags flags;

  // Parsing properties. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::properties< char > properties;

  // Document type. See libxsd/xsd/cxx/parser/xerces/elements.hxx
  // for details.
  //
  typedef ::xsd::cxx::parser::xerces::document< char > document;
}

namespace vfp
{
  class coordinateAttrType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_coordinateAttrType ();
  };

  class coordinateType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    x ();

    virtual void
    y ();

    virtual void
    z ();

    virtual void
    post_coordinateType ();

    // Parser construction API.
    //
    void
    x_parser (::vfp::coordinateAttrType_pskel&);

    void
    y_parser (::vfp::coordinateAttrType_pskel&);

    void
    z_parser (::vfp::coordinateAttrType_pskel&);

    void
    parsers (::vfp::coordinateAttrType_pskel& /* x */,
             ::vfp::coordinateAttrType_pskel& /* y */,
             ::vfp::coordinateAttrType_pskel& /* z */);

    // Constructor.
    //
    coordinateType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::coordinateAttrType_pskel* x_parser_;
    ::vfp::coordinateAttrType_pskel* y_parser_;
    ::vfp::coordinateAttrType_pskel* z_parser_;
  };

  class polygonType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_polygonType ();
  };

  class linpol_pskel: public virtual ::vfp::polygonType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    segment ();

    virtual void
    post_linpol ();

    // Parser construction API.
    //
    void
    segment_parser (::vfp::segmentType_pskel&);

    void
    parsers (::vfp::segmentType_pskel& /* segment */);

    // Constructor.
    //
    linpol_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::segmentType_pskel* segment_parser_;
  };

  class linearType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    segment ();

    virtual void
    post_linearType ();

    // Parser construction API.
    //
    void
    segment_parser (::vfp::segmentType_pskel&);

    void
    parsers (::vfp::segmentType_pskel& /* segment */);

    // Constructor.
    //
    linearType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::segmentType_pskel* segment_parser_;
  };

  class circle_pskel: public virtual ::vfp::polygonType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    c ();

    virtual void
    r ();

    virtual void
    post_circle ();

    // Parser construction API.
    //
    void
    c_parser (::vfp::coordinateType_pskel&);

    void
    r_parser (::vfp::radiusAttrType_pskel&);

    void
    parsers (::vfp::coordinateType_pskel& /* c */,
             ::vfp::radiusAttrType_pskel& /* r */);

    // Constructor.
    //
    circle_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::coordinateType_pskel* c_parser_;
    ::vfp::radiusAttrType_pskel* r_parser_;
  };

  class solidType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    polygon ();

    virtual void
    post_solidType ();

    // Parser construction API.
    //
    void
    polygon_parser (::vfp::polygonType_pskel&);

    void
    parsers (::vfp::polygonType_pskel& /* polygon */);

    // Constructor.
    //
    solidType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::polygonType_pskel* polygon_parser_;
  };

  class holeCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    polygon ();

    virtual void
    post_holeCollectionType ();

    // Parser construction API.
    //
    void
    polygon_parser (::vfp::polygonType_pskel&);

    void
    parsers (::vfp::polygonType_pskel& /* polygon */);

    // Constructor.
    //
    holeCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::polygonType_pskel* polygon_parser_;
  };

  class regionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    solid ();

    virtual void
    holes ();

    virtual void
    post_regionType ();

    // Parser construction API.
    //
    void
    solid_parser (::vfp::solidType_pskel&);

    void
    holes_parser (::vfp::holeCollectionType_pskel&);

    void
    parsers (::vfp::solidType_pskel& /* solid */,
             ::vfp::holeCollectionType_pskel& /* holes */);

    // Constructor.
    //
    regionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::solidType_pskel* solid_parser_;
    ::vfp::holeCollectionType_pskel* holes_parser_;
  };

  class segmentType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_segmentType ();
  };

  class se_pskel: public virtual ::vfp::segmentType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    c ();

    virtual void
    post_se ();

    // Parser construction API.
    //
    void
    c_parser (::vfp::coordinateType_pskel&);

    void
    parsers (::vfp::coordinateType_pskel& /* c */);

    // Constructor.
    //
    se_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::coordinateType_pskel* c_parser_;
  };

  class ar_pskel: public virtual ::vfp::segmentType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    c ();

    virtual void
    post_ar ();

    // Parser construction API.
    //
    void
    c_parser (::vfp::coordinateType_pskel&);

    void
    parsers (::vfp::coordinateType_pskel& /* c */);

    // Constructor.
    //
    ar_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::coordinateType_pskel* c_parser_;
  };

  class radiusAttrType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_radiusAttrType ();
  };

  class rotationAttrType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_rotationAttrType ();
  };

  class justificationAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_justificationAttrType ();
  };

  class heightAttrType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_heightAttrType ();
  };

  class widthAttrType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_widthAttrType ();
  };

  class valueAttrType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_valueAttrType ();
  };

  class textType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    c ();

    virtual void
    hod ();

    virtual void
    o ();

    virtual void
    j ();

    virtual void
    vys ();

    virtual void
    sir ();

    virtual void
    post_textType ();

    // Parser construction API.
    //
    void
    c_parser (::vfp::coordinateType_pskel&);

    void
    hod_parser (::vfp::notEmptyStringType_pskel&);

    void
    o_parser (::vfp::rotationAttrType_pskel&);

    void
    j_parser (::vfp::justificationAttrType_pskel&);

    void
    vys_parser (::vfp::heightAttrType_pskel&);

    void
    sir_parser (::vfp::widthAttrType_pskel&);

    void
    parsers (::vfp::coordinateType_pskel& /* c */,
             ::vfp::notEmptyStringType_pskel& /* hod */,
             ::vfp::rotationAttrType_pskel& /* o */,
             ::vfp::justificationAttrType_pskel& /* j */,
             ::vfp::heightAttrType_pskel& /* vys */,
             ::vfp::widthAttrType_pskel& /* sir */);

    // Constructor.
    //
    textType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::coordinateType_pskel* c_parser_;
    ::vfp::notEmptyStringType_pskel* hod_parser_;
    ::vfp::rotationAttrType_pskel* o_parser_;
    ::vfp::justificationAttrType_pskel* j_parser_;
    ::vfp::heightAttrType_pskel* vys_parser_;
    ::vfp::widthAttrType_pskel* sir_parser_;
  };

  class cellType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    c ();

    virtual void
    o ();

    virtual void
    naz ();

    virtual void
    post_cellType ();

    // Parser construction API.
    //
    void
    c_parser (::vfp::coordinateType_pskel&);

    void
    o_parser (::vfp::rotationAttrType_pskel&);

    void
    naz_parser (::vfp::notEmptyStringType_pskel&);

    void
    parsers (::vfp::coordinateType_pskel& /* c */,
             ::vfp::rotationAttrType_pskel& /* o */,
             ::vfp::notEmptyStringType_pskel& /* naz */);

    // Constructor.
    //
    cellType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::coordinateType_pskel* c_parser_;
    ::vfp::rotationAttrType_pskel* o_parser_;
    ::vfp::notEmptyStringType_pskel* naz_parser_;
  };

  class cadasterCodeType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_cadasterCodeType ();
  };

  class lvNumberAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_lvNumberAttrType ();
  };

  class numeratorType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_numeratorType ();
  };

  class denominatorType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_denominatorType ();
  };

  class areaAttrType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_areaAttrType ();
  };

  class priceAttrType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_priceAttrType ();
  };

  class distanceType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_distanceType ();
  };

  class notEmptyStringType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_notEmptyStringType ();
  };

  class opsubIdType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_opsubIdType ();
  };

  class bpejType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_bpejType ();
  };

  class bpejCodeAttrType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_bpejCodeAttrType ();
  };

  class birthNumberType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_birthNumberType ();
  };

  class streetNumberType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_streetNumberType ();
  };

  class orientationNumberType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_orientationNumberType ();
  };

  class postCodeType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_postCodeType ();
  };

  class emailType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_emailType ();
  };

  class icoType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_icoType ();
  };

  class koeficientType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_koeficientType ();
  };

  class participantType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_participantType ();
  };

  class basicIdAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_basicIdAttrType ();
  };

  class kindOfUseAttrType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_kindOfUseAttrType ();
  };

  class kindOfAreaAttrType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_kindOfAreaAttrType ();
  };

  class basicStringIdAttrType_pskel: public virtual ::vfp::notEmptyStringType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_basicStringIdAttrType ();
  };

  class participantIdAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_participantIdAttrType ();
  };

  class parcelIdAttrType_pskel: public virtual ::vfp::basicStringIdAttrType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_parcelIdAttrType ();
  };

  class noteAttrType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_noteAttrType ();
  };

  class outsideParcelType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pa ();

    virtual void
    post_outsideParcelType ();

    // Parser construction API.
    //
    void
    pa_parser (::vfp::pa_pskel&);

    void
    parsers (::vfp::pa_pskel& /* pa */);

    // Constructor.
    //
    outsideParcelType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pa_pskel* pa_parser_;
  };

  class newNumberType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    vym ();

    virtual void
    kk ();

    virtual void
    kcp ();

    virtual void
    pcp ();

    virtual void
    dcp ();

    virtual void
    post_newNumberType ();

    // Parser construction API.
    //
    void
    vym_parser (::vfp::areaAttrType_pskel&);

    void
    kk_parser (::vfp::cadasterCodeType_pskel&);

    void
    kcp_parser (::vfp::parcelNumberAttrType_pskel&);

    void
    pcp_parser (::vfp::poddeleniNumberAttrType_pskel&);

    void
    dcp_parser (::vfp::druhCislovaniNumberAttrType_pskel&);

    void
    parsers (::vfp::areaAttrType_pskel& /* vym */,
             ::vfp::cadasterCodeType_pskel& /* kk */,
             ::vfp::parcelNumberAttrType_pskel& /* kcp */,
             ::vfp::poddeleniNumberAttrType_pskel& /* pcp */,
             ::vfp::druhCislovaniNumberAttrType_pskel& /* dcp */);

    // Constructor.
    //
    newNumberType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::areaAttrType_pskel* vym_parser_;
    ::vfp::cadasterCodeType_pskel* kk_parser_;
    ::vfp::parcelNumberAttrType_pskel* kcp_parser_;
    ::vfp::poddeleniNumberAttrType_pskel* pcp_parser_;
    ::vfp::druhCislovaniNumberAttrType_pskel* dcp_parser_;
  };

  class newNumberCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    nc ();

    virtual void
    post_newNumberCollectionType ();

    // Parser construction API.
    //
    void
    nc_parser (::vfp::newNumberType_pskel&);

    void
    parsers (::vfp::newNumberType_pskel& /* nc */);

    // Constructor.
    //
    newNumberCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::newNumberType_pskel* nc_parser_;
  };

  class pneresType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pa ();

    virtual void
    post_pneresType ();

    // Parser construction API.
    //
    void
    pa_parser (::vfp::pa1_pskel&);

    void
    parsers (::vfp::pa1_pskel& /* pa */);

    // Constructor.
    //
    pneresType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pa1_pskel* pa_parser_;
  };

  class ochrType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    dil ();

    virtual void
    post_ochrType ();

    // Parser construction API.
    //
    void
    dil_parser (::vfp::dil_pskel&);

    void
    parsers (::vfp::dil_pskel& /* dil */);

    // Constructor.
    //
    ochrType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::dil_pskel* dil_parser_;
  };

  class typPravAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_typPravAttrType ();
  };

  class bremenoType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    cen ();

    virtual void
    typ ();

    virtual void
    popis ();

    virtual void
    o_pro_id ();

    virtual void
    p_k_id ();

    virtual void
    o_k_id ();

    virtual void
    pn_id ();

    virtual void
    p_pro_id ();

    virtual void
    post_bremenoType ();

    // Parser construction API.
    //
    void
    cen_parser (::vfp::priceAttrType_pskel&);

    void
    typ_parser (::vfp::typPravAttrType_pskel&);

    void
    popis_parser (::vfp::notEmptyStringType_pskel&);

    void
    o_pro_id_parser (::vfp::notEmptyStringType_pskel&);

    void
    p_k_id_parser (::vfp::notEmptyStringType_pskel&);

    void
    o_k_id_parser (::vfp::notEmptyStringType_pskel&);

    void
    pn_id_parser (::vfp::parcelIdAttrType_pskel&);

    void
    p_pro_id_parser (::vfp::parcelIdAttrType_pskel&);

    void
    parsers (::vfp::priceAttrType_pskel& /* cen */,
             ::vfp::typPravAttrType_pskel& /* typ */,
             ::vfp::notEmptyStringType_pskel& /* popis */,
             ::vfp::notEmptyStringType_pskel& /* o_pro_id */,
             ::vfp::notEmptyStringType_pskel& /* p_k_id */,
             ::vfp::notEmptyStringType_pskel& /* o_k_id */,
             ::vfp::parcelIdAttrType_pskel& /* pn_id */,
             ::vfp::parcelIdAttrType_pskel& /* p_pro_id */);

    // Constructor.
    //
    bremenoType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::priceAttrType_pskel* cen_parser_;
    ::vfp::typPravAttrType_pskel* typ_parser_;
    ::vfp::notEmptyStringType_pskel* popis_parser_;
    ::vfp::notEmptyStringType_pskel* o_pro_id_parser_;
    ::vfp::notEmptyStringType_pskel* p_k_id_parser_;
    ::vfp::notEmptyStringType_pskel* o_k_id_parser_;
    ::vfp::parcelIdAttrType_pskel* pn_id_parser_;
    ::vfp::parcelIdAttrType_pskel* p_pro_id_parser_;
  };

  class bremCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    bre ();

    virtual void
    post_bremCollectionType ();

    // Parser construction API.
    //
    void
    bre_parser (::vfp::bremenoType_pskel&);

    void
    parsers (::vfp::bremenoType_pskel& /* bre */);

    // Constructor.
    //
    bremCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::bremenoType_pskel* bre_parser_;
  };

  class nvlaType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    lvn ();

    virtual void
    kkn ();

    virtual void
    vymp ();

    virtual void
    cenp ();

    virtual void
    vzdp ();

    virtual void
    op_id ();

    virtual void
    poz ();

    virtual void
    post_nvlaType ();

    // Parser construction API.
    //
    void
    lvn_parser (::vfp::lvNumberAttrType_pskel&);

    void
    kkn_parser (::vfp::cadasterCodeType_pskel&);

    void
    vymp_parser (::vfp::areaAttrType_pskel&);

    void
    cenp_parser (::vfp::priceAttrType_pskel&);

    void
    vzdp_parser (::vfp::distanceType_pskel&);

    void
    op_id_parser (::vfp::opsubIdType_pskel&);

    void
    poz_parser (::vfp::noteAttrType_pskel&);

    void
    parsers (::vfp::lvNumberAttrType_pskel& /* lvn */,
             ::vfp::cadasterCodeType_pskel& /* kkn */,
             ::vfp::areaAttrType_pskel& /* vymp */,
             ::vfp::priceAttrType_pskel& /* cenp */,
             ::vfp::distanceType_pskel& /* vzdp */,
             ::vfp::opsubIdType_pskel& /* op_id */,
             ::vfp::noteAttrType_pskel& /* poz */);

    // Constructor.
    //
    nvlaType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::lvNumberAttrType_pskel* lvn_parser_;
    ::vfp::cadasterCodeType_pskel* kkn_parser_;
    ::vfp::areaAttrType_pskel* vymp_parser_;
    ::vfp::priceAttrType_pskel* cenp_parser_;
    ::vfp::distanceType_pskel* vzdp_parser_;
    ::vfp::opsubIdType_pskel* op_id_parser_;
    ::vfp::noteAttrType_pskel* poz_parser_;
  };

  class nvlaCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    nvla ();

    virtual void
    post_nvlaCollectionType ();

    // Parser construction API.
    //
    void
    nvla_parser (::vfp::nvlaType_pskel&);

    void
    parsers (::vfp::nvlaType_pskel& /* nvla */);

    // Constructor.
    //
    nvlaCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::nvlaType_pskel* nvla_parser_;
  };

  class vlaCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    vla ();

    virtual void
    post_vlaCollectionType ();

    // Parser construction API.
    //
    void
    vla_parser (::vfp::vla_pskel&);

    void
    parsers (::vfp::vla_pskel& /* vla */);

    // Constructor.
    //
    vlaCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::vla_pskel* vla_parser_;
  };

  class participantReferenceType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    uc_id ();

    virtual void
    op_id ();

    virtual void
    typ ();

    virtual void
    post_participantReferenceType ();

    // Parser construction API.
    //
    void
    uc_id_parser (::vfp::participantIdAttrType_pskel&);

    void
    op_id_parser (::vfp::opsubIdType_pskel&);

    void
    typ_parser (::vfp::participantType_pskel&);

    void
    parsers (::vfp::participantIdAttrType_pskel& /* uc_id */,
             ::vfp::opsubIdType_pskel& /* op_id */,
             ::vfp::participantType_pskel& /* typ */);

    // Constructor.
    //
    participantReferenceType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::participantIdAttrType_pskel* uc_id_parser_;
    ::vfp::opsubIdType_pskel* op_id_parser_;
    ::vfp::participantType_pskel* typ_parser_;
  };

  class druhCislovaniNumberAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_druhCislovaniNumberAttrType ();
  };

  class parcelNumberAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_parcelNumberAttrType ();
  };

  class poddeleniNumberAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_poddeleniNumberAttrType ();
  };

  class resAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_resAttrType ();
  };

  class rusAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_rusAttrType ();
  };

  class cirAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_cirAttrType ();
  };

  class soucAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_soucAttrType ();
  };

  class vysAttrType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_vysAttrType ();
  };

  class navrhPhaseType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_navrhPhaseType ();
  };

  class navrhType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    lv ();

    virtual void
    fn ();

    virtual void
    dvn (const ::xml_schema::date_time&);

    virtual void
    dvnr (const ::xml_schema::date_time&);

    virtual void
    post_navrhType ();

    // Parser construction API.
    //
    void
    lv_parser (::vfp::lv_pskel&);

    void
    fn_parser (::vfp::navrhPhaseType_pskel&);

    void
    dvn_parser (::xml_schema::date_time_pskel&);

    void
    dvnr_parser (::xml_schema::date_time_pskel&);

    void
    parsers (::vfp::lv_pskel& /* lv */,
             ::vfp::navrhPhaseType_pskel& /* fn */,
             ::xml_schema::date_time_pskel& /* dvn */,
             ::xml_schema::date_time_pskel& /* dvnr */);

    // Constructor.
    //
    navrhType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::lv_pskel* lv_parser_;
    ::vfp::navrhPhaseType_pskel* fn_parser_;
    ::xml_schema::date_time_pskel* dvn_parser_;
    ::xml_schema::date_time_pskel* dvnr_parser_;
  };

  class bpejCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    dil ();

    virtual void
    post_bpejCollectionType ();

    // Parser construction API.
    //
    void
    dil_parser (::vfp::dil1_pskel&);

    void
    parsers (::vfp::dil1_pskel& /* dil */);

    // Constructor.
    //
    bpejCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::dil1_pskel* dil_parser_;
  };

  class claimBpejCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    dil ();

    virtual void
    post_claimBpejCollectionType ();

    // Parser construction API.
    //
    void
    dil_parser (::vfp::dil2_pskel&);

    void
    parsers (::vfp::dil2_pskel& /* dil */);

    // Constructor.
    //
    claimBpejCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::dil2_pskel* dil_parser_;
  };

  class areaKindLabelAttrType_pskel: public virtual ::vfp::notEmptyStringType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_areaKindLabelAttrType ();
  };

  class porostPartTypeBase_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_porostPartTypeBase ();
  };

  class solPart_pskel: public virtual ::vfp::porostPartTypeBase_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    cen ();

    virtual void
    naz ();

    virtual void
    post_solPart ();

    // Parser construction API.
    //
    void
    cen_parser (::vfp::priceAttrType_pskel&);

    void
    naz_parser (::vfp::notEmptyStringType_pskel&);

    void
    parsers (::vfp::priceAttrType_pskel& /* cen */,
             ::vfp::notEmptyStringType_pskel& /* naz */);

    // Constructor.
    //
    solPart_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::priceAttrType_pskel* cen_parser_;
    ::vfp::notEmptyStringType_pskel* naz_parser_;
  };

  class znaPart_pskel: public virtual ::vfp::porostPartTypeBase_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    cen ();

    virtual void
    post_znaPart ();

    // Parser construction API.
    //
    void
    cen_parser (::vfp::areaAttrType_pskel&);

    void
    parsers (::vfp::areaAttrType_pskel& /* cen */);

    // Constructor.
    //
    znaPart_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::areaAttrType_pskel* cen_parser_;
  };

  class porPart_pskel: public virtual ::vfp::porostPartTypeBase_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    dp ();

    virtual void
    dpo ();

    virtual void
    zv ();

    virtual void
    cen ();

    virtual void
    vym ();

    virtual void
    post_porPart ();

    // Parser construction API.
    //
    void
    dp_parser (::vfp::kindOfAreaAttrType_pskel&);

    void
    dpo_parser (::vfp::areaKindLabelAttrType_pskel&);

    void
    zv_parser (::vfp::kindOfUseAttrType_pskel&);

    void
    cen_parser (::vfp::priceAttrType_pskel&);

    void
    vym_parser (::vfp::areaAttrType_pskel&);

    void
    parsers (::vfp::kindOfAreaAttrType_pskel& /* dp */,
             ::vfp::areaKindLabelAttrType_pskel& /* dpo */,
             ::vfp::kindOfUseAttrType_pskel& /* zv */,
             ::vfp::priceAttrType_pskel& /* cen */,
             ::vfp::areaAttrType_pskel& /* vym */);

    // Constructor.
    //
    porPart_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::kindOfAreaAttrType_pskel* dp_parser_;
    ::vfp::areaKindLabelAttrType_pskel* dpo_parser_;
    ::vfp::kindOfUseAttrType_pskel* zv_parser_;
    ::vfp::priceAttrType_pskel* cen_parser_;
    ::vfp::areaAttrType_pskel* vym_parser_;
  };

  class porCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    dil ();

    virtual void
    post_porCollectionType ();

    // Parser construction API.
    //
    void
    dil_parser (::vfp::porostPartTypeBase_pskel&);

    void
    parsers (::vfp::porostPartTypeBase_pskel& /* dil */);

    // Constructor.
    //
    porCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::porostPartTypeBase_pskel* dil_parser_;
  };

  class areaType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    reg ();

    virtual void
    t ();

    virtual void
    post_areaType ();

    // Parser construction API.
    //
    void
    reg_parser (::vfp::regionType_pskel&);

    void
    t_parser (::vfp::textType_pskel&);

    void
    parsers (::vfp::regionType_pskel& /* reg */,
             ::vfp::textType_pskel& /* t */);

    // Constructor.
    //
    areaType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::regionType_pskel* reg_parser_;
    ::vfp::textType_pskel* t_parser_;
  };

  class ucaCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    uca ();

    virtual void
    post_ucaCollectionType ();

    // Parser construction API.
    //
    void
    uca_parser (::vfp::participantReferenceType_pskel&);

    void
    parsers (::vfp::participantReferenceType_pskel& /* uca */);

    // Constructor.
    //
    ucaCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::participantReferenceType_pskel* uca_parser_;
  };

  class gparType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    area ();

    virtual void
    post_gparType ();

    // Parser construction API.
    //
    void
    area_parser (::vfp::areaType_pskel&);

    void
    parsers (::vfp::areaType_pskel& /* area */);

    // Constructor.
    //
    gparType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::areaType_pskel* area_parser_;
  };

  class narokType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    lv ();

    virtual void
    post_narokType ();

    // Parser construction API.
    //
    void
    lv_parser (::vfp::lv1_pskel&);

    void
    parsers (::vfp::lv1_pskel& /* lv */);

    // Constructor.
    //
    narokType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::lv1_pskel* lv_parser_;
  };

  class ucaType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    id ();

    virtual void
    op_id ();

    virtual void
    jm (const ::std::string&);

    virtual void
    pr (const ::std::string&);

    virtual void
    naz (const ::std::string&);

    virtual void
    tpj (const ::std::string&);

    virtual void
    tzj (const ::std::string&);

    virtual void
    rc ();

    virtual void
    ico ();

    virtual void
    ul (const ::std::string&);

    virtual void
    cd ();

    virtual void
    co ();

    virtual void
    caob (const ::std::string&);

    virtual void
    mc (const ::std::string&);

    virtual void
    ob (const ::std::string&);

    virtual void
    psc ();

    virtual void
    okr (const ::std::string&);

    virtual void
    sta (const ::std::string&);

    virtual void
    email ();

    virtual void
    tel ();

    virtual void
    post_ucaType ();

    // Parser construction API.
    //
    void
    id_parser (::vfp::participantIdAttrType_pskel&);

    void
    op_id_parser (::vfp::opsubIdType_pskel&);

    void
    jm_parser (::xml_schema::string_pskel&);

    void
    pr_parser (::xml_schema::string_pskel&);

    void
    naz_parser (::xml_schema::string_pskel&);

    void
    tpj_parser (::xml_schema::string_pskel&);

    void
    tzj_parser (::xml_schema::string_pskel&);

    void
    rc_parser (::vfp::birthNumberType_pskel&);

    void
    ico_parser (::vfp::icoType_pskel&);

    void
    ul_parser (::xml_schema::string_pskel&);

    void
    cd_parser (::vfp::streetNumberType_pskel&);

    void
    co_parser (::vfp::orientationNumberType_pskel&);

    void
    caob_parser (::xml_schema::string_pskel&);

    void
    mc_parser (::xml_schema::string_pskel&);

    void
    ob_parser (::xml_schema::string_pskel&);

    void
    psc_parser (::vfp::postCodeType_pskel&);

    void
    okr_parser (::xml_schema::string_pskel&);

    void
    sta_parser (::xml_schema::string_pskel&);

    void
    email_parser (::vfp::emailType_pskel&);

    void
    tel_parser (::vfp::notEmptyStringType_pskel&);

    void
    parsers (::vfp::participantIdAttrType_pskel& /* id */,
             ::vfp::opsubIdType_pskel& /* op_id */,
             ::xml_schema::string_pskel& /* jm */,
             ::xml_schema::string_pskel& /* pr */,
             ::xml_schema::string_pskel& /* naz */,
             ::xml_schema::string_pskel& /* tpj */,
             ::xml_schema::string_pskel& /* tzj */,
             ::vfp::birthNumberType_pskel& /* rc */,
             ::vfp::icoType_pskel& /* ico */,
             ::xml_schema::string_pskel& /* ul */,
             ::vfp::streetNumberType_pskel& /* cd */,
             ::vfp::orientationNumberType_pskel& /* co */,
             ::xml_schema::string_pskel& /* caob */,
             ::xml_schema::string_pskel& /* mc */,
             ::xml_schema::string_pskel& /* ob */,
             ::vfp::postCodeType_pskel& /* psc */,
             ::xml_schema::string_pskel& /* okr */,
             ::xml_schema::string_pskel& /* sta */,
             ::vfp::emailType_pskel& /* email */,
             ::vfp::notEmptyStringType_pskel& /* tel */);

    // Constructor.
    //
    ucaType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::participantIdAttrType_pskel* id_parser_;
    ::vfp::opsubIdType_pskel* op_id_parser_;
    ::xml_schema::string_pskel* jm_parser_;
    ::xml_schema::string_pskel* pr_parser_;
    ::xml_schema::string_pskel* naz_parser_;
    ::xml_schema::string_pskel* tpj_parser_;
    ::xml_schema::string_pskel* tzj_parser_;
    ::vfp::birthNumberType_pskel* rc_parser_;
    ::vfp::icoType_pskel* ico_parser_;
    ::xml_schema::string_pskel* ul_parser_;
    ::vfp::streetNumberType_pskel* cd_parser_;
    ::vfp::orientationNumberType_pskel* co_parser_;
    ::xml_schema::string_pskel* caob_parser_;
    ::xml_schema::string_pskel* mc_parser_;
    ::xml_schema::string_pskel* ob_parser_;
    ::vfp::postCodeType_pskel* psc_parser_;
    ::xml_schema::string_pskel* okr_parser_;
    ::xml_schema::string_pskel* sta_parser_;
    ::vfp::emailType_pskel* email_parser_;
    ::vfp::notEmptyStringType_pskel* tel_parser_;
  };

  class ucastniciType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    uca ();

    virtual void
    post_ucastniciType ();

    // Parser construction API.
    //
    void
    uca_parser (::vfp::ucaType_pskel&);

    void
    parsers (::vfp::ucaType_pskel& /* uca */);

    // Constructor.
    //
    ucastniciType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::ucaType_pskel* uca_parser_;
  };

  class graphicElementCodeType_pskel: public virtual ::xml_schema::integer_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_graphicElementCodeType ();
  };

  class mdpType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pl ();

    virtual void
    post_mdpType ();

    // Parser construction API.
    //
    void
    pl_parser (::vfp::pl_pskel&);

    void
    parsers (::vfp::pl_pskel& /* pl */);

    // Constructor.
    //
    mdpType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pl_pskel* pl_parser_;
  };

  class plin_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    lin ();

    virtual void
    typ ();

    virtual void
    post_plin ();

    // Parser construction API.
    //
    void
    lin_parser (::vfp::linearType_pskel&);

    void
    typ_parser (::vfp::graphicElementCodeType_pskel&);

    void
    parsers (::vfp::linearType_pskel& /* lin */,
             ::vfp::graphicElementCodeType_pskel& /* typ */);

    // Constructor.
    //
    plin_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::linearType_pskel* lin_parser_;
    ::vfp::graphicElementCodeType_pskel* typ_parser_;
  };

  class pzna_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    b ();

    virtual void
    typ ();

    virtual void
    post_pzna ();

    // Parser construction API.
    //
    void
    b_parser (::vfp::cellType_pskel&);

    void
    typ_parser (::vfp::graphicElementCodeType_pskel&);

    void
    parsers (::vfp::cellType_pskel& /* b */,
             ::vfp::graphicElementCodeType_pskel& /* typ */);

    // Constructor.
    //
    pzna_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::cellType_pskel* b_parser_;
    ::vfp::graphicElementCodeType_pskel* typ_parser_;
  };

  class ptext_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    t ();

    virtual void
    typ ();

    virtual void
    post_ptext ();

    // Parser construction API.
    //
    void
    t_parser (::vfp::textType_pskel&);

    void
    typ_parser (::vfp::graphicElementCodeType_pskel&);

    void
    parsers (::vfp::textType_pskel& /* t */,
             ::vfp::graphicElementCodeType_pskel& /* typ */);

    // Constructor.
    //
    ptext_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::textType_pskel* t_parser_;
    ::vfp::graphicElementCodeType_pskel* typ_parser_;
  };

  class parea_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    reg ();

    virtual void
    typ ();

    virtual void
    post_parea ();

    // Parser construction API.
    //
    void
    reg_parser (::vfp::regionType_pskel&);

    void
    typ_parser (::vfp::graphicElementCodeType_pskel&);

    void
    parsers (::vfp::regionType_pskel& /* reg */,
             ::vfp::graphicElementCodeType_pskel& /* typ */);

    // Constructor.
    //
    parea_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::regionType_pskel* reg_parser_;
    ::vfp::graphicElementCodeType_pskel* typ_parser_;
  };

  class psouType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    sx ();

    virtual void
    sy ();

    virtual void
    sz ();

    virtual void
    cb (long long);

    virtual void
    post_psouType ();

    // Parser construction API.
    //
    void
    sx_parser (::vfp::coordinateAttrType_pskel&);

    void
    sy_parser (::vfp::coordinateAttrType_pskel&);

    void
    sz_parser (::vfp::coordinateAttrType_pskel&);

    void
    cb_parser (::xml_schema::integer_pskel&);

    void
    parsers (::vfp::coordinateAttrType_pskel& /* sx */,
             ::vfp::coordinateAttrType_pskel& /* sy */,
             ::vfp::coordinateAttrType_pskel& /* sz */,
             ::xml_schema::integer_pskel& /* cb */);

    // Constructor.
    //
    psouType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::coordinateAttrType_pskel* sx_parser_;
    ::vfp::coordinateAttrType_pskel* sy_parser_;
    ::vfp::coordinateAttrType_pskel* sz_parser_;
    ::xml_schema::integer_pskel* cb_parser_;
  };

  class zsType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    plins ();

    virtual void
    pznas ();

    virtual void
    ptexts ();

    virtual void
    psour ();

    virtual void
    post_zsType ();

    // Parser construction API.
    //
    void
    plins_parser (::vfp::plins_pskel&);

    void
    pznas_parser (::vfp::pznas_pskel&);

    void
    ptexts_parser (::vfp::ptexts_pskel&);

    void
    psour_parser (::vfp::psour_pskel&);

    void
    parsers (::vfp::plins_pskel& /* plins */,
             ::vfp::pznas_pskel& /* pznas */,
             ::vfp::ptexts_pskel& /* ptexts */,
             ::vfp::psour_pskel& /* psour */);

    // Constructor.
    //
    zsType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::plins_pskel* plins_parser_;
    ::vfp::pznas_pskel* pznas_parser_;
    ::vfp::ptexts_pskel* ptexts_parser_;
    ::vfp::psour_pskel* psour_parser_;
  };

  class pmType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pmlins ();

    virtual void
    pmznas ();

    virtual void
    pmtexts ();

    virtual void
    pmareas ();

    virtual void
    post_pmType ();

    // Parser construction API.
    //
    void
    pmlins_parser (::vfp::pmlins_pskel&);

    void
    pmznas_parser (::vfp::pmznas_pskel&);

    void
    pmtexts_parser (::vfp::pmtexts_pskel&);

    void
    pmareas_parser (::vfp::pmareas_pskel&);

    void
    parsers (::vfp::pmlins_pskel& /* pmlins */,
             ::vfp::pmznas_pskel& /* pmznas */,
             ::vfp::pmtexts_pskel& /* pmtexts */,
             ::vfp::pmareas_pskel& /* pmareas */);

    // Constructor.
    //
    pmType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pmlins_pskel* pmlins_parser_;
    ::vfp::pmznas_pskel* pmznas_parser_;
    ::vfp::pmtexts_pskel* pmtexts_parser_;
    ::vfp::pmareas_pskel* pmareas_parser_;
  };

  class mpType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    mplins ();

    virtual void
    mpznas ();

    virtual void
    mptexts ();

    virtual void
    mpareas ();

    virtual void
    post_mpType ();

    // Parser construction API.
    //
    void
    mplins_parser (::vfp::mplins_pskel&);

    void
    mpznas_parser (::vfp::mpznas_pskel&);

    void
    mptexts_parser (::vfp::mptexts_pskel&);

    void
    mpareas_parser (::vfp::mpareas_pskel&);

    void
    parsers (::vfp::mplins_pskel& /* mplins */,
             ::vfp::mpznas_pskel& /* mpznas */,
             ::vfp::mptexts_pskel& /* mptexts */,
             ::vfp::mpareas_pskel& /* mpareas */);

    // Constructor.
    //
    mpType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::mplins_pskel* mplins_parser_;
    ::vfp::mpznas_pskel* mpznas_parser_;
    ::vfp::mptexts_pskel* mptexts_parser_;
    ::vfp::mpareas_pskel* mpareas_parser_;
  };

  class meosType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    meoslins ();

    virtual void
    meosznas ();

    virtual void
    meostexts ();

    virtual void
    meosareas ();

    virtual void
    post_meosType ();

    // Parser construction API.
    //
    void
    meoslins_parser (::vfp::meoslins_pskel&);

    void
    meosznas_parser (::vfp::meosznas_pskel&);

    void
    meostexts_parser (::vfp::meostexts_pskel&);

    void
    meosareas_parser (::vfp::meosareas_pskel&);

    void
    parsers (::vfp::meoslins_pskel& /* meoslins */,
             ::vfp::meosznas_pskel& /* meosznas */,
             ::vfp::meostexts_pskel& /* meostexts */,
             ::vfp::meosareas_pskel& /* meosareas */);

    // Constructor.
    //
    meosType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::meoslins_pskel* meoslins_parser_;
    ::vfp::meosznas_pskel* meosznas_parser_;
    ::vfp::meostexts_pskel* meostexts_parser_;
    ::vfp::meosareas_pskel* meosareas_parser_;
  };

  class meonType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    meonlins ();

    virtual void
    meonznas ();

    virtual void
    meontexts ();

    virtual void
    meonareas ();

    virtual void
    post_meonType ();

    // Parser construction API.
    //
    void
    meonlins_parser (::vfp::meonlins_pskel&);

    void
    meonznas_parser (::vfp::meonznas_pskel&);

    void
    meontexts_parser (::vfp::meontexts_pskel&);

    void
    meonareas_parser (::vfp::meonareas_pskel&);

    void
    parsers (::vfp::meonlins_pskel& /* meonlins */,
             ::vfp::meonznas_pskel& /* meonznas */,
             ::vfp::meontexts_pskel& /* meontexts */,
             ::vfp::meonareas_pskel& /* meonareas */);

    // Constructor.
    //
    meonType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::meonlins_pskel* meonlins_parser_;
    ::vfp::meonznas_pskel* meonznas_parser_;
    ::vfp::meontexts_pskel* meontexts_parser_;
    ::vfp::meonareas_pskel* meonareas_parser_;
  };

  class hvpszType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    hvpszlins ();

    virtual void
    hvpszznas ();

    virtual void
    hvpsztexts ();

    virtual void
    hvpszareas ();

    virtual void
    post_hvpszType ();

    // Parser construction API.
    //
    void
    hvpszlins_parser (::vfp::hvpszlins_pskel&);

    void
    hvpszznas_parser (::vfp::hvpszznas_pskel&);

    void
    hvpsztexts_parser (::vfp::hvpsztexts_pskel&);

    void
    hvpszareas_parser (::vfp::hvpszareas_pskel&);

    void
    parsers (::vfp::hvpszlins_pskel& /* hvpszlins */,
             ::vfp::hvpszznas_pskel& /* hvpszznas */,
             ::vfp::hvpsztexts_pskel& /* hvpsztexts */,
             ::vfp::hvpszareas_pskel& /* hvpszareas */);

    // Constructor.
    //
    hvpszType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::hvpszlins_pskel* hvpszlins_parser_;
    ::vfp::hvpszznas_pskel* hvpszznas_parser_;
    ::vfp::hvpsztexts_pskel* hvpsztexts_parser_;
    ::vfp::hvpszareas_pskel* hvpszareas_parser_;
  };

  class zvbodsType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    zvbod ();

    virtual void
    post_zvbodsType ();

    // Parser construction API.
    //
    void
    zvbod_parser (::vfp::zvbod_pskel&);

    void
    parsers (::vfp::zvbod_pskel& /* zvbod */);

    // Constructor.
    //
    zvbodsType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::zvbod_pskel* zvbod_parser_;
  };

  class zvlinsType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    zvlin ();

    virtual void
    post_zvlinsType ();

    // Parser construction API.
    //
    void
    zvlin_parser (::vfp::zvlin_pskel&);

    void
    parsers (::vfp::zvlin_pskel& /* zvlin */);

    // Constructor.
    //
    zvlinsType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::zvlin_pskel* zvlin_parser_;
  };

  class zvareasType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    zvarea ();

    virtual void
    post_zvareasType ();

    // Parser construction API.
    //
    void
    zvarea_parser (::vfp::zvarea_pskel&);

    void
    parsers (::vfp::zvarea_pskel& /* zvarea */);

    // Constructor.
    //
    zvareasType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::zvarea_pskel* zvarea_parser_;
  };

  class souType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    sx ();

    virtual void
    sy ();

    virtual void
    cb (long long);

    virtual void
    kk (long long);

    virtual void
    ps ();

    virtual void
    vys ();

    virtual void
    post_souType ();

    // Parser construction API.
    //
    void
    sx_parser (::vfp::coordinateAttrType_pskel&);

    void
    sy_parser (::vfp::coordinateAttrType_pskel&);

    void
    cb_parser (::xml_schema::integer_pskel&);

    void
    kk_parser (::xml_schema::integer_pskel&);

    void
    ps_parser (::vfp::notEmptyStringType_pskel&);

    void
    vys_parser (::vfp::vysAttrType_pskel&);

    void
    parsers (::vfp::coordinateAttrType_pskel& /* sx */,
             ::vfp::coordinateAttrType_pskel& /* sy */,
             ::xml_schema::integer_pskel& /* cb */,
             ::xml_schema::integer_pskel& /* kk */,
             ::vfp::notEmptyStringType_pskel& /* ps */,
             ::vfp::vysAttrType_pskel& /* vys */);

    // Constructor.
    //
    souType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::coordinateAttrType_pskel* sx_parser_;
    ::vfp::coordinateAttrType_pskel* sy_parser_;
    ::xml_schema::integer_pskel* cb_parser_;
    ::xml_schema::integer_pskel* kk_parser_;
    ::vfp::notEmptyStringType_pskel* ps_parser_;
    ::vfp::vysAttrType_pskel* vys_parser_;
  };

  class opuType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pl ();

    virtual void
    post_opuType ();

    // Parser construction API.
    //
    void
    pl_parser (::vfp::pl1_pskel&);

    void
    parsers (::vfp::pl1_pskel& /* pl */);

    // Constructor.
    //
    opuType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pl1_pskel* pl_parser_;
  };

  class porostType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_porostType ();
  };

  class sol_pskel: public virtual ::vfp::porostType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    b ();

    virtual void
    cen ();

    virtual void
    naz (const ::std::string&);

    virtual void
    id ();

    virtual void
    post_sol ();

    // Parser construction API.
    //
    void
    b_parser (::vfp::cellType_pskel&);

    void
    cen_parser (::vfp::priceAttrType_pskel&);

    void
    naz_parser (::xml_schema::string_pskel&);

    void
    id_parser (::vfp::basicIdAttrType_pskel&);

    void
    parsers (::vfp::cellType_pskel& /* b */,
             ::vfp::priceAttrType_pskel& /* cen */,
             ::xml_schema::string_pskel& /* naz */,
             ::vfp::basicIdAttrType_pskel& /* id */);

    // Constructor.
    //
    sol_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::cellType_pskel* b_parser_;
    ::vfp::priceAttrType_pskel* cen_parser_;
    ::xml_schema::string_pskel* naz_parser_;
    ::vfp::basicIdAttrType_pskel* id_parser_;
  };

  class por_pskel: public virtual ::vfp::porostType_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    area ();

    virtual void
    dp ();

    virtual void
    dpo ();

    virtual void
    zv ();

    virtual void
    cen ();

    virtual void
    id ();

    virtual void
    post_por ();

    // Parser construction API.
    //
    void
    area_parser (::vfp::areaType_pskel&);

    void
    dp_parser (::vfp::kindOfAreaAttrType_pskel&);

    void
    dpo_parser (::vfp::areaKindLabelAttrType_pskel&);

    void
    zv_parser (::vfp::kindOfUseAttrType_pskel&);

    void
    cen_parser (::vfp::priceAttrType_pskel&);

    void
    id_parser (::vfp::basicIdAttrType_pskel&);

    void
    parsers (::vfp::areaType_pskel& /* area */,
             ::vfp::kindOfAreaAttrType_pskel& /* dp */,
             ::vfp::areaKindLabelAttrType_pskel& /* dpo */,
             ::vfp::kindOfUseAttrType_pskel& /* zv */,
             ::vfp::priceAttrType_pskel& /* cen */,
             ::vfp::basicIdAttrType_pskel& /* id */);

    // Constructor.
    //
    por_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::areaType_pskel* area_parser_;
    ::vfp::kindOfAreaAttrType_pskel* dp_parser_;
    ::vfp::areaKindLabelAttrType_pskel* dpo_parser_;
    ::vfp::kindOfUseAttrType_pskel* zv_parser_;
    ::vfp::priceAttrType_pskel* cen_parser_;
    ::vfp::basicIdAttrType_pskel* id_parser_;
  };

  class stageType_pskel: public virtual ::xml_schema::decimal_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_stageType ();
  };

  class landConsType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_landConsType ();
  };

  class ocvType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_ocvType ();
  };

  class versionType_pskel: public virtual ::xml_schema::string_pskel
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    post_versionType ();
  };

  class headerType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    dvz (const ::xml_schema::date_time&);

    virtual void
    dkn (const ::xml_schema::date_time&);

    virtual void
    aut ();

    virtual void
    et ();

    virtual void
    kk ();

    virtual void
    typ ();

    virtual void
    cpu (unsigned long long);

    virtual void
    ocv ();

    virtual void
    kv ();

    virtual void
    ksz ();

    virtual void
    ver ();

    virtual void
    sw ();

    virtual void
    sx ();

    virtual void
    sy ();

    virtual void
    post_headerType ();

    // Parser construction API.
    //
    void
    dvz_parser (::xml_schema::date_time_pskel&);

    void
    dkn_parser (::xml_schema::date_time_pskel&);

    void
    aut_parser (::vfp::notEmptyStringType_pskel&);

    void
    et_parser (::vfp::stageType_pskel&);

    void
    kk_parser (::vfp::cadasterCodeType_pskel&);

    void
    typ_parser (::vfp::landConsType_pskel&);

    void
    cpu_parser (::xml_schema::positive_integer_pskel&);

    void
    ocv_parser (::vfp::ocvType_pskel&);

    void
    kv_parser (::vfp::koeficientType_pskel&);

    void
    ksz_parser (::vfp::koeficientType_pskel&);

    void
    ver_parser (::vfp::versionType_pskel&);

    void
    sw_parser (::vfp::notEmptyStringType_pskel&);

    void
    sx_parser (::vfp::coordinateAttrType_pskel&);

    void
    sy_parser (::vfp::coordinateAttrType_pskel&);

    void
    parsers (::xml_schema::date_time_pskel& /* dvz */,
             ::xml_schema::date_time_pskel& /* dkn */,
             ::vfp::notEmptyStringType_pskel& /* aut */,
             ::vfp::stageType_pskel& /* et */,
             ::vfp::cadasterCodeType_pskel& /* kk */,
             ::vfp::landConsType_pskel& /* typ */,
             ::xml_schema::positive_integer_pskel& /* cpu */,
             ::vfp::ocvType_pskel& /* ocv */,
             ::vfp::koeficientType_pskel& /* kv */,
             ::vfp::koeficientType_pskel& /* ksz */,
             ::vfp::versionType_pskel& /* ver */,
             ::vfp::notEmptyStringType_pskel& /* sw */,
             ::vfp::coordinateAttrType_pskel& /* sx */,
             ::vfp::coordinateAttrType_pskel& /* sy */);

    // Constructor.
    //
    headerType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::date_time_pskel* dvz_parser_;
    ::xml_schema::date_time_pskel* dkn_parser_;
    ::vfp::notEmptyStringType_pskel* aut_parser_;
    ::vfp::stageType_pskel* et_parser_;
    ::vfp::cadasterCodeType_pskel* kk_parser_;
    ::vfp::landConsType_pskel* typ_parser_;
    ::xml_schema::positive_integer_pskel* cpu_parser_;
    ::vfp::ocvType_pskel* ocv_parser_;
    ::vfp::koeficientType_pskel* kv_parser_;
    ::vfp::koeficientType_pskel* ksz_parser_;
    ::vfp::versionType_pskel* ver_parser_;
    ::vfp::notEmptyStringType_pskel* sw_parser_;
    ::vfp::coordinateAttrType_pskel* sx_parser_;
    ::vfp::coordinateAttrType_pskel* sy_parser_;
  };

  class pbremCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pl ();

    virtual void
    post_pbremCollectionType ();

    // Parser construction API.
    //
    void
    pl_parser (::vfp::pl2_pskel&);

    void
    parsers (::vfp::pl2_pskel& /* pl */);

    // Constructor.
    //
    pbremCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pl2_pskel* pl_parser_;
  };

  class spozCollectionType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pl ();

    virtual void
    post_spozCollectionType ();

    // Parser construction API.
    //
    void
    pl_parser (::vfp::pl3_pskel&);

    void
    parsers (::vfp::pl3_pskel& /* pl */);

    // Constructor.
    //
    spozCollectionType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pl3_pskel* pl_parser_;
  };

  class vfpType_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    hlav ();

    virtual void
    ucastnici ();

    virtual void
    narok ();

    virtual void
    navrh ();

    virtual void
    pneres ();

    virtual void
    pmimo ();

    virtual void
    bpej ();

    virtual void
    bpejr2 ();

    virtual void
    mdp ();

    virtual void
    zs ();

    virtual void
    opu ();

    virtual void
    por ();

    virtual void
    pbre ();

    virtual void
    spoz ();

    virtual void
    pm ();

    virtual void
    mp ();

    virtual void
    meos ();

    virtual void
    meon ();

    virtual void
    hvpsz ();

    virtual void
    zv ();

    virtual void
    post_vfpType ();

    // Parser construction API.
    //
    void
    hlav_parser (::vfp::headerType_pskel&);

    void
    ucastnici_parser (::vfp::ucastniciType_pskel&);

    void
    narok_parser (::vfp::narokType_pskel&);

    void
    navrh_parser (::vfp::navrhType_pskel&);

    void
    pneres_parser (::vfp::pneresType_pskel&);

    void
    pmimo_parser (::vfp::outsideParcelType_pskel&);

    void
    bpej_parser (::vfp::bpej_pskel&);

    void
    bpejr2_parser (::vfp::bpejr2_pskel&);

    void
    mdp_parser (::vfp::mdpType_pskel&);

    void
    zs_parser (::vfp::zsType_pskel&);

    void
    opu_parser (::vfp::opuType_pskel&);

    void
    por_parser (::vfp::por1_pskel&);

    void
    pbre_parser (::vfp::pbremCollectionType_pskel&);

    void
    spoz_parser (::vfp::spozCollectionType_pskel&);

    void
    pm_parser (::vfp::pmType_pskel&);

    void
    mp_parser (::vfp::mpType_pskel&);

    void
    meos_parser (::vfp::meosType_pskel&);

    void
    meon_parser (::vfp::meonType_pskel&);

    void
    hvpsz_parser (::vfp::hvpszType_pskel&);

    void
    zv_parser (::vfp::zv_pskel&);

    void
    parsers (::vfp::headerType_pskel& /* hlav */,
             ::vfp::ucastniciType_pskel& /* ucastnici */,
             ::vfp::narokType_pskel& /* narok */,
             ::vfp::navrhType_pskel& /* navrh */,
             ::vfp::pneresType_pskel& /* pneres */,
             ::vfp::outsideParcelType_pskel& /* pmimo */,
             ::vfp::bpej_pskel& /* bpej */,
             ::vfp::bpejr2_pskel& /* bpejr2 */,
             ::vfp::mdpType_pskel& /* mdp */,
             ::vfp::zsType_pskel& /* zs */,
             ::vfp::opuType_pskel& /* opu */,
             ::vfp::por1_pskel& /* por */,
             ::vfp::pbremCollectionType_pskel& /* pbre */,
             ::vfp::spozCollectionType_pskel& /* spoz */,
             ::vfp::pmType_pskel& /* pm */,
             ::vfp::mpType_pskel& /* mp */,
             ::vfp::meosType_pskel& /* meos */,
             ::vfp::meonType_pskel& /* meon */,
             ::vfp::hvpszType_pskel& /* hvpsz */,
             ::vfp::zv_pskel& /* zv */);

    // Constructor.
    //
    vfpType_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::headerType_pskel* hlav_parser_;
    ::vfp::ucastniciType_pskel* ucastnici_parser_;
    ::vfp::narokType_pskel* narok_parser_;
    ::vfp::navrhType_pskel* navrh_parser_;
    ::vfp::pneresType_pskel* pneres_parser_;
    ::vfp::outsideParcelType_pskel* pmimo_parser_;
    ::vfp::bpej_pskel* bpej_parser_;
    ::vfp::bpejr2_pskel* bpejr2_parser_;
    ::vfp::mdpType_pskel* mdp_parser_;
    ::vfp::zsType_pskel* zs_parser_;
    ::vfp::opuType_pskel* opu_parser_;
    ::vfp::por1_pskel* por_parser_;
    ::vfp::pbremCollectionType_pskel* pbre_parser_;
    ::vfp::spozCollectionType_pskel* spoz_parser_;
    ::vfp::pmType_pskel* pm_parser_;
    ::vfp::mpType_pskel* mp_parser_;
    ::vfp::meosType_pskel* meos_parser_;
    ::vfp::meonType_pskel* meon_parser_;
    ::vfp::hvpszType_pskel* hvpsz_parser_;
    ::vfp::zv_pskel* zv_parser_;
  };

  class pa_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    gpar ();

    virtual void
    parid ();

    virtual void
    post_pa ();

    // Parser construction API.
    //
    void
    gpar_parser (::vfp::gparType_pskel&);

    void
    parid_parser (::vfp::parcelIdAttrType_pskel&);

    void
    parsers (::vfp::gparType_pskel& /* gpar */,
             ::vfp::parcelIdAttrType_pskel& /* parid */);

    // Constructor.
    //
    pa_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::gparType_pskel* gpar_parser_;
    ::vfp::parcelIdAttrType_pskel* parid_parser_;
  };

  class pa1_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    gpar ();

    virtual void
    ncn ();

    virtual void
    parid ();

    virtual void
    vymz ();

    virtual void
    dpz ();

    virtual void
    zvz ();

    virtual void
    post_pa1 ();

    // Parser construction API.
    //
    void
    gpar_parser (::vfp::gparType_pskel&);

    void
    ncn_parser (::vfp::newNumberCollectionType_pskel&);

    void
    parid_parser (::vfp::parcelIdAttrType_pskel&);

    void
    vymz_parser (::vfp::areaAttrType_pskel&);

    void
    dpz_parser (::vfp::kindOfAreaAttrType_pskel&);

    void
    zvz_parser (::vfp::kindOfUseAttrType_pskel&);

    void
    parsers (::vfp::gparType_pskel& /* gpar */,
             ::vfp::newNumberCollectionType_pskel& /* ncn */,
             ::vfp::parcelIdAttrType_pskel& /* parid */,
             ::vfp::areaAttrType_pskel& /* vymz */,
             ::vfp::kindOfAreaAttrType_pskel& /* dpz */,
             ::vfp::kindOfUseAttrType_pskel& /* zvz */);

    // Constructor.
    //
    pa1_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::gparType_pskel* gpar_parser_;
    ::vfp::newNumberCollectionType_pskel* ncn_parser_;
    ::vfp::parcelIdAttrType_pskel* parid_parser_;
    ::vfp::areaAttrType_pskel* vymz_parser_;
    ::vfp::kindOfAreaAttrType_pskel* dpz_parser_;
    ::vfp::kindOfUseAttrType_pskel* zvz_parser_;
  };

  class dil_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    zo (long long);

    virtual void
    post_dil ();

    // Parser construction API.
    //
    void
    zo_parser (::xml_schema::integer_pskel&);

    void
    parsers (::xml_schema::integer_pskel& /* zo */);

    // Constructor.
    //
    dil_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::xml_schema::integer_pskel* zo_parser_;
  };

  class vla_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    nvlas ();

    virtual void
    op_id ();

    virtual void
    cit ();

    virtual void
    jmen ();

    virtual void
    tpk (long long);

    virtual void
    rus ();

    virtual void
    post_vla ();

    // Parser construction API.
    //
    void
    nvlas_parser (::vfp::nvlaCollectionType_pskel&);

    void
    op_id_parser (::vfp::opsubIdType_pskel&);

    void
    cit_parser (::vfp::numeratorType_pskel&);

    void
    jmen_parser (::vfp::denominatorType_pskel&);

    void
    tpk_parser (::xml_schema::integer_pskel&);

    void
    rus_parser (::vfp::rusAttrType_pskel&);

    void
    parsers (::vfp::nvlaCollectionType_pskel& /* nvlas */,
             ::vfp::opsubIdType_pskel& /* op_id */,
             ::vfp::numeratorType_pskel& /* cit */,
             ::vfp::denominatorType_pskel& /* jmen */,
             ::xml_schema::integer_pskel& /* tpk */,
             ::vfp::rusAttrType_pskel& /* rus */);

    // Constructor.
    //
    vla_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::nvlaCollectionType_pskel* nvlas_parser_;
    ::vfp::opsubIdType_pskel* op_id_parser_;
    ::vfp::numeratorType_pskel* cit_parser_;
    ::vfp::denominatorType_pskel* jmen_parser_;
    ::xml_schema::integer_pskel* tpk_parser_;
    ::vfp::rusAttrType_pskel* rus_parser_;
  };

  class lv_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    par ();

    virtual void
    ucas ();

    virtual void
    kk ();

    virtual void
    cis ();

    virtual void
    vymr ();

    virtual void
    vymnr ();

    virtual void
    cen ();

    virtual void
    vzd ();

    virtual void
    post_lv ();

    // Parser construction API.
    //
    void
    par_parser (::vfp::par_pskel&);

    void
    ucas_parser (::vfp::ucaCollectionType_pskel&);

    void
    kk_parser (::vfp::cadasterCodeType_pskel&);

    void
    cis_parser (::vfp::lvNumberAttrType_pskel&);

    void
    vymr_parser (::vfp::areaAttrType_pskel&);

    void
    vymnr_parser (::vfp::areaAttrType_pskel&);

    void
    cen_parser (::vfp::priceAttrType_pskel&);

    void
    vzd_parser (::vfp::distanceType_pskel&);

    void
    parsers (::vfp::par_pskel& /* par */,
             ::vfp::ucaCollectionType_pskel& /* ucas */,
             ::vfp::cadasterCodeType_pskel& /* kk */,
             ::vfp::lvNumberAttrType_pskel& /* cis */,
             ::vfp::areaAttrType_pskel& /* vymr */,
             ::vfp::areaAttrType_pskel& /* vymnr */,
             ::vfp::priceAttrType_pskel& /* cen */,
             ::vfp::distanceType_pskel& /* vzd */);

    // Constructor.
    //
    lv_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::par_pskel* par_parser_;
    ::vfp::ucaCollectionType_pskel* ucas_parser_;
    ::vfp::cadasterCodeType_pskel* kk_parser_;
    ::vfp::lvNumberAttrType_pskel* cis_parser_;
    ::vfp::areaAttrType_pskel* vymr_parser_;
    ::vfp::areaAttrType_pskel* vymnr_parser_;
    ::vfp::priceAttrType_pskel* cen_parser_;
    ::vfp::distanceType_pskel* vzd_parser_;
  };

  class dil1_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    typ ();

    virtual void
    kod ();

    virtual void
    vym ();

    virtual void
    cen ();

    virtual void
    poz (const ::std::string&);

    virtual void
    post_dil1 ();

    // Parser construction API.
    //
    void
    typ_parser (::vfp::bpejType_pskel&);

    void
    kod_parser (::vfp::bpejCodeAttrType_pskel&);

    void
    vym_parser (::vfp::areaAttrType_pskel&);

    void
    cen_parser (::vfp::priceAttrType_pskel&);

    void
    poz_parser (::xml_schema::string_pskel&);

    void
    parsers (::vfp::bpejType_pskel& /* typ */,
             ::vfp::bpejCodeAttrType_pskel& /* kod */,
             ::vfp::areaAttrType_pskel& /* vym */,
             ::vfp::priceAttrType_pskel& /* cen */,
             ::xml_schema::string_pskel& /* poz */);

    // Constructor.
    //
    dil1_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::bpejType_pskel* typ_parser_;
    ::vfp::bpejCodeAttrType_pskel* kod_parser_;
    ::vfp::areaAttrType_pskel* vym_parser_;
    ::vfp::priceAttrType_pskel* cen_parser_;
    ::xml_schema::string_pskel* poz_parser_;
  };

  class dil2_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    typ ();

    virtual void
    kod ();

    virtual void
    vym ();

    virtual void
    cen ();

    virtual void
    poz (const ::std::string&);

    virtual void
    dp ();

    virtual void
    zv ();

    virtual void
    post_dil2 ();

    // Parser construction API.
    //
    void
    typ_parser (::vfp::bpejType_pskel&);

    void
    kod_parser (::vfp::bpejCodeAttrType_pskel&);

    void
    vym_parser (::vfp::areaAttrType_pskel&);

    void
    cen_parser (::vfp::priceAttrType_pskel&);

    void
    poz_parser (::xml_schema::string_pskel&);

    void
    dp_parser (::vfp::kindOfAreaAttrType_pskel&);

    void
    zv_parser (::vfp::kindOfUseAttrType_pskel&);

    void
    parsers (::vfp::bpejType_pskel& /* typ */,
             ::vfp::bpejCodeAttrType_pskel& /* kod */,
             ::vfp::areaAttrType_pskel& /* vym */,
             ::vfp::priceAttrType_pskel& /* cen */,
             ::xml_schema::string_pskel& /* poz */,
             ::vfp::kindOfAreaAttrType_pskel& /* dp */,
             ::vfp::kindOfUseAttrType_pskel& /* zv */);

    // Constructor.
    //
    dil2_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::bpejType_pskel* typ_parser_;
    ::vfp::bpejCodeAttrType_pskel* kod_parser_;
    ::vfp::areaAttrType_pskel* vym_parser_;
    ::vfp::priceAttrType_pskel* cen_parser_;
    ::xml_schema::string_pskel* poz_parser_;
    ::vfp::kindOfAreaAttrType_pskel* dp_parser_;
    ::vfp::kindOfUseAttrType_pskel* zv_parser_;
  };

  class lv1_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    par ();

    virtual void
    vlas ();

    virtual void
    ucas ();

    virtual void
    cis ();

    virtual void
    kk ();

    virtual void
    post_lv1 ();

    // Parser construction API.
    //
    void
    par_parser (::vfp::par1_pskel&);

    void
    vlas_parser (::vfp::vlaCollectionType_pskel&);

    void
    ucas_parser (::vfp::ucaCollectionType_pskel&);

    void
    cis_parser (::vfp::lvNumberAttrType_pskel&);

    void
    kk_parser (::vfp::cadasterCodeType_pskel&);

    void
    parsers (::vfp::par1_pskel& /* par */,
             ::vfp::vlaCollectionType_pskel& /* vlas */,
             ::vfp::ucaCollectionType_pskel& /* ucas */,
             ::vfp::lvNumberAttrType_pskel& /* cis */,
             ::vfp::cadasterCodeType_pskel& /* kk */);

    // Constructor.
    //
    lv1_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::par1_pskel* par_parser_;
    ::vfp::vlaCollectionType_pskel* vlas_parser_;
    ::vfp::ucaCollectionType_pskel* ucas_parser_;
    ::vfp::lvNumberAttrType_pskel* cis_parser_;
    ::vfp::cadasterCodeType_pskel* kk_parser_;
  };

  class pl_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    area ();

    virtual void
    id ();

    virtual void
    dp ();

    virtual void
    zv ();

    virtual void
    post_pl ();

    // Parser construction API.
    //
    void
    area_parser (::vfp::areaType_pskel&);

    void
    id_parser (::vfp::basicIdAttrType_pskel&);

    void
    dp_parser (::vfp::kindOfAreaAttrType_pskel&);

    void
    zv_parser (::vfp::kindOfUseAttrType_pskel&);

    void
    parsers (::vfp::areaType_pskel& /* area */,
             ::vfp::basicIdAttrType_pskel& /* id */,
             ::vfp::kindOfAreaAttrType_pskel& /* dp */,
             ::vfp::kindOfUseAttrType_pskel& /* zv */);

    // Constructor.
    //
    pl_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::areaType_pskel* area_parser_;
    ::vfp::basicIdAttrType_pskel* id_parser_;
    ::vfp::kindOfAreaAttrType_pskel* dp_parser_;
    ::vfp::kindOfUseAttrType_pskel* zv_parser_;
  };

  class plins_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    plin ();

    virtual void
    post_plins ();

    // Parser construction API.
    //
    void
    plin_parser (::vfp::plin_pskel&);

    void
    parsers (::vfp::plin_pskel& /* plin */);

    // Constructor.
    //
    plins_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::plin_pskel* plin_parser_;
  };

  class pznas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pzna ();

    virtual void
    post_pznas ();

    // Parser construction API.
    //
    void
    pzna_parser (::vfp::pzna_pskel&);

    void
    parsers (::vfp::pzna_pskel& /* pzna */);

    // Constructor.
    //
    pznas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pzna_pskel* pzna_parser_;
  };

  class ptexts_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    ptext ();

    virtual void
    post_ptexts ();

    // Parser construction API.
    //
    void
    ptext_parser (::vfp::ptext_pskel&);

    void
    parsers (::vfp::ptext_pskel& /* ptext */);

    // Constructor.
    //
    ptexts_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::ptext_pskel* ptext_parser_;
  };

  class psour_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    psou ();

    virtual void
    post_psour ();

    // Parser construction API.
    //
    void
    psou_parser (::vfp::psouType_pskel&);

    void
    parsers (::vfp::psouType_pskel& /* psou */);

    // Constructor.
    //
    psour_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::psouType_pskel* psou_parser_;
  };

  class pmlins_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pmlin ();

    virtual void
    post_pmlins ();

    // Parser construction API.
    //
    void
    pmlin_parser (::vfp::plin_pskel&);

    void
    parsers (::vfp::plin_pskel& /* pmlin */);

    // Constructor.
    //
    pmlins_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::plin_pskel* pmlin_parser_;
  };

  class pmznas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pmzna ();

    virtual void
    post_pmznas ();

    // Parser construction API.
    //
    void
    pmzna_parser (::vfp::pzna_pskel&);

    void
    parsers (::vfp::pzna_pskel& /* pmzna */);

    // Constructor.
    //
    pmznas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pzna_pskel* pmzna_parser_;
  };

  class pmtexts_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pmtext ();

    virtual void
    post_pmtexts ();

    // Parser construction API.
    //
    void
    pmtext_parser (::vfp::ptext_pskel&);

    void
    parsers (::vfp::ptext_pskel& /* pmtext */);

    // Constructor.
    //
    pmtexts_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::ptext_pskel* pmtext_parser_;
  };

  class pmareas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pmarea ();

    virtual void
    post_pmareas ();

    // Parser construction API.
    //
    void
    pmarea_parser (::vfp::parea_pskel&);

    void
    parsers (::vfp::parea_pskel& /* pmarea */);

    // Constructor.
    //
    pmareas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::parea_pskel* pmarea_parser_;
  };

  class mplins_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    mplin ();

    virtual void
    post_mplins ();

    // Parser construction API.
    //
    void
    mplin_parser (::vfp::plin_pskel&);

    void
    parsers (::vfp::plin_pskel& /* mplin */);

    // Constructor.
    //
    mplins_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::plin_pskel* mplin_parser_;
  };

  class mpznas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    mpzna ();

    virtual void
    post_mpznas ();

    // Parser construction API.
    //
    void
    mpzna_parser (::vfp::pzna_pskel&);

    void
    parsers (::vfp::pzna_pskel& /* mpzna */);

    // Constructor.
    //
    mpznas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pzna_pskel* mpzna_parser_;
  };

  class mptexts_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    mptext ();

    virtual void
    post_mptexts ();

    // Parser construction API.
    //
    void
    mptext_parser (::vfp::ptext_pskel&);

    void
    parsers (::vfp::ptext_pskel& /* mptext */);

    // Constructor.
    //
    mptexts_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::ptext_pskel* mptext_parser_;
  };

  class mpareas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    mparea ();

    virtual void
    post_mpareas ();

    // Parser construction API.
    //
    void
    mparea_parser (::vfp::parea_pskel&);

    void
    parsers (::vfp::parea_pskel& /* mparea */);

    // Constructor.
    //
    mpareas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::parea_pskel* mparea_parser_;
  };

  class meoslins_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    meoslin ();

    virtual void
    post_meoslins ();

    // Parser construction API.
    //
    void
    meoslin_parser (::vfp::plin_pskel&);

    void
    parsers (::vfp::plin_pskel& /* meoslin */);

    // Constructor.
    //
    meoslins_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::plin_pskel* meoslin_parser_;
  };

  class meosznas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    meoszna ();

    virtual void
    post_meosznas ();

    // Parser construction API.
    //
    void
    meoszna_parser (::vfp::pzna_pskel&);

    void
    parsers (::vfp::pzna_pskel& /* meoszna */);

    // Constructor.
    //
    meosznas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pzna_pskel* meoszna_parser_;
  };

  class meostexts_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    meostext ();

    virtual void
    post_meostexts ();

    // Parser construction API.
    //
    void
    meostext_parser (::vfp::ptext_pskel&);

    void
    parsers (::vfp::ptext_pskel& /* meostext */);

    // Constructor.
    //
    meostexts_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::ptext_pskel* meostext_parser_;
  };

  class meosareas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    meosarea ();

    virtual void
    post_meosareas ();

    // Parser construction API.
    //
    void
    meosarea_parser (::vfp::parea_pskel&);

    void
    parsers (::vfp::parea_pskel& /* meosarea */);

    // Constructor.
    //
    meosareas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::parea_pskel* meosarea_parser_;
  };

  class meonlins_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    meonlin ();

    virtual void
    post_meonlins ();

    // Parser construction API.
    //
    void
    meonlin_parser (::vfp::plin_pskel&);

    void
    parsers (::vfp::plin_pskel& /* meonlin */);

    // Constructor.
    //
    meonlins_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::plin_pskel* meonlin_parser_;
  };

  class meonznas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    meonzna ();

    virtual void
    post_meonznas ();

    // Parser construction API.
    //
    void
    meonzna_parser (::vfp::pzna_pskel&);

    void
    parsers (::vfp::pzna_pskel& /* meonzna */);

    // Constructor.
    //
    meonznas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pzna_pskel* meonzna_parser_;
  };

  class meontexts_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    meontext ();

    virtual void
    post_meontexts ();

    // Parser construction API.
    //
    void
    meontext_parser (::vfp::ptext_pskel&);

    void
    parsers (::vfp::ptext_pskel& /* meontext */);

    // Constructor.
    //
    meontexts_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::ptext_pskel* meontext_parser_;
  };

  class meonareas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    meonarea ();

    virtual void
    post_meonareas ();

    // Parser construction API.
    //
    void
    meonarea_parser (::vfp::parea_pskel&);

    void
    parsers (::vfp::parea_pskel& /* meonarea */);

    // Constructor.
    //
    meonareas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::parea_pskel* meonarea_parser_;
  };

  class hvpszlins_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    hvpszlin ();

    virtual void
    post_hvpszlins ();

    // Parser construction API.
    //
    void
    hvpszlin_parser (::vfp::plin_pskel&);

    void
    parsers (::vfp::plin_pskel& /* hvpszlin */);

    // Constructor.
    //
    hvpszlins_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::plin_pskel* hvpszlin_parser_;
  };

  class hvpszznas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    hvpszzna ();

    virtual void
    post_hvpszznas ();

    // Parser construction API.
    //
    void
    hvpszzna_parser (::vfp::pzna_pskel&);

    void
    parsers (::vfp::pzna_pskel& /* hvpszzna */);

    // Constructor.
    //
    hvpszznas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pzna_pskel* hvpszzna_parser_;
  };

  class hvpsztexts_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    hvpsztext ();

    virtual void
    post_hvpsztexts ();

    // Parser construction API.
    //
    void
    hvpsztext_parser (::vfp::ptext_pskel&);

    void
    parsers (::vfp::ptext_pskel& /* hvpsztext */);

    // Constructor.
    //
    hvpsztexts_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::ptext_pskel* hvpsztext_parser_;
  };

  class hvpszareas_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    hvpszarea ();

    virtual void
    post_hvpszareas ();

    // Parser construction API.
    //
    void
    hvpszarea_parser (::vfp::parea_pskel&);

    void
    parsers (::vfp::parea_pskel& /* hvpszarea */);

    // Constructor.
    //
    hvpszareas_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::parea_pskel* hvpszarea_parser_;
  };

  class zvbod_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    c ();

    virtual void
    cb (long long);

    virtual void
    post_zvbod ();

    // Parser construction API.
    //
    void
    c_parser (::vfp::coordinateType_pskel&);

    void
    cb_parser (::xml_schema::integer_pskel&);

    void
    parsers (::vfp::coordinateType_pskel& /* c */,
             ::xml_schema::integer_pskel& /* cb */);

    // Constructor.
    //
    zvbod_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::coordinateType_pskel* c_parser_;
    ::xml_schema::integer_pskel* cb_parser_;
  };

  class zvlin_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    lin ();

    virtual void
    post_zvlin ();

    // Parser construction API.
    //
    void
    lin_parser (::vfp::linearType_pskel&);

    void
    parsers (::vfp::linearType_pskel& /* lin */);

    // Constructor.
    //
    zvlin_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::linearType_pskel* lin_parser_;
  };

  class zvarea_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    reg ();

    virtual void
    post_zvarea ();

    // Parser construction API.
    //
    void
    reg_parser (::vfp::regionType_pskel&);

    void
    parsers (::vfp::regionType_pskel& /* reg */);

    // Constructor.
    //
    zvarea_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::regionType_pskel* reg_parser_;
  };

  class pl1_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    reg ();

    virtual void
    sour ();

    virtual void
    id ();

    virtual void
    res ();

    virtual void
    poz ();

    virtual void
    post_pl1 ();

    // Parser construction API.
    //
    void
    reg_parser (::vfp::regionType_pskel&);

    void
    sour_parser (::vfp::sour_pskel&);

    void
    id_parser (::vfp::basicIdAttrType_pskel&);

    void
    res_parser (::vfp::resAttrType_pskel&);

    void
    poz_parser (::vfp::noteAttrType_pskel&);

    void
    parsers (::vfp::regionType_pskel& /* reg */,
             ::vfp::sour_pskel& /* sour */,
             ::vfp::basicIdAttrType_pskel& /* id */,
             ::vfp::resAttrType_pskel& /* res */,
             ::vfp::noteAttrType_pskel& /* poz */);

    // Constructor.
    //
    pl1_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::regionType_pskel* reg_parser_;
    ::vfp::sour_pskel* sour_parser_;
    ::vfp::basicIdAttrType_pskel* id_parser_;
    ::vfp::resAttrType_pskel* res_parser_;
    ::vfp::noteAttrType_pskel* poz_parser_;
  };

  class pl2_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    area ();

    virtual void
    id ();

    virtual void
    typ ();

    virtual void
    popis ();

    virtual void
    post_pl2 ();

    // Parser construction API.
    //
    void
    area_parser (::vfp::areaType_pskel&);

    void
    id_parser (::vfp::basicIdAttrType_pskel&);

    void
    typ_parser (::vfp::typPravAttrType_pskel&);

    void
    popis_parser (::vfp::notEmptyStringType_pskel&);

    void
    parsers (::vfp::areaType_pskel& /* area */,
             ::vfp::basicIdAttrType_pskel& /* id */,
             ::vfp::typPravAttrType_pskel& /* typ */,
             ::vfp::notEmptyStringType_pskel& /* popis */);

    // Constructor.
    //
    pl2_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::areaType_pskel* area_parser_;
    ::vfp::basicIdAttrType_pskel* id_parser_;
    ::vfp::typPravAttrType_pskel* typ_parser_;
    ::vfp::notEmptyStringType_pskel* popis_parser_;
  };

  class pl3_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    area ();

    virtual void
    id ();

    virtual void
    op (long long);

    virtual void
    psz ();

    virtual void
    post_pl3 ();

    // Parser construction API.
    //
    void
    area_parser (::vfp::areaType_pskel&);

    void
    id_parser (::vfp::basicIdAttrType_pskel&);

    void
    op_parser (::xml_schema::integer_pskel&);

    void
    psz_parser (::vfp::notEmptyStringType_pskel&);

    void
    parsers (::vfp::areaType_pskel& /* area */,
             ::vfp::basicIdAttrType_pskel& /* id */,
             ::xml_schema::integer_pskel& /* op */,
             ::vfp::notEmptyStringType_pskel& /* psz */);

    // Constructor.
    //
    pl3_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::areaType_pskel* area_parser_;
    ::vfp::basicIdAttrType_pskel* id_parser_;
    ::xml_schema::integer_pskel* op_parser_;
    ::vfp::notEmptyStringType_pskel* psz_parser_;
  };

  class bpej_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pl ();

    virtual void
    post_bpej ();

    // Parser construction API.
    //
    void
    pl_parser (::vfp::pl4_pskel&);

    void
    parsers (::vfp::pl4_pskel& /* pl */);

    // Constructor.
    //
    bpej_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pl4_pskel* pl_parser_;
  };

  class bpejr2_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pl ();

    virtual void
    post_bpejr2 ();

    // Parser construction API.
    //
    void
    pl_parser (::vfp::pl5_pskel&);

    void
    parsers (::vfp::pl5_pskel& /* pl */);

    // Constructor.
    //
    bpejr2_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pl5_pskel* pl_parser_;
  };

  class por1_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    porost ();

    virtual void
    post_por1 ();

    // Parser construction API.
    //
    void
    porost_parser (::vfp::porostType_pskel&);

    void
    parsers (::vfp::porostType_pskel& /* porost */);

    // Constructor.
    //
    por1_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::porostType_pskel* porost_parser_;
  };

  class zv_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    zvbods ();

    virtual void
    zvlins ();

    virtual void
    zvareas ();

    virtual void
    post_zv ();

    // Parser construction API.
    //
    void
    zvbods_parser (::vfp::zvbodsType_pskel&);

    void
    zvlins_parser (::vfp::zvlinsType_pskel&);

    void
    zvareas_parser (::vfp::zvareasType_pskel&);

    void
    parsers (::vfp::zvbodsType_pskel& /* zvbods */,
             ::vfp::zvlinsType_pskel& /* zvlins */,
             ::vfp::zvareasType_pskel& /* zvareas */);

    // Constructor.
    //
    zv_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::zvbodsType_pskel* zvbods_parser_;
    ::vfp::zvlinsType_pskel* zvlins_parser_;
    ::vfp::zvareasType_pskel* zvareas_parser_;
  };

  class par_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pa ();

    virtual void
    post_par ();

    // Parser construction API.
    //
    void
    pa_parser (::vfp::pa2_pskel&);

    void
    parsers (::vfp::pa2_pskel& /* pa */);

    // Constructor.
    //
    par_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pa2_pskel* pa_parser_;
  };

  class par1_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    pa ();

    virtual void
    post_par1 ();

    // Parser construction API.
    //
    void
    pa_parser (::vfp::pa3_pskel&);

    void
    parsers (::vfp::pa3_pskel& /* pa */);

    // Constructor.
    //
    par1_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::pa3_pskel* pa_parser_;
  };

  class sour_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    sou ();

    virtual void
    post_sour ();

    // Parser construction API.
    //
    void
    sou_parser (::vfp::souType_pskel&);

    void
    parsers (::vfp::souType_pskel& /* sou */);

    // Constructor.
    //
    sour_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    protected:
    ::vfp::souType_pskel* sou_parser_;
  };

  class pl4_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    area ();

    virtual void
    id ();

    virtual void
    kod ();

    virtual void
    cena ();

    virtual void
    post_pl4 ();

    // Parser construction API.
    //
    void
    area_parser (::vfp::areaType_pskel&);

    void
    id_parser (::vfp::basicIdAttrType_pskel&);

    void
    kod_parser (::vfp::bpejCodeAttrType_pskel&);

    void
    cena_parser (::vfp::priceAttrType_pskel&);

    void
    parsers (::vfp::areaType_pskel& /* area */,
             ::vfp::basicIdAttrType_pskel& /* id */,
             ::vfp::bpejCodeAttrType_pskel& /* kod */,
             ::vfp::priceAttrType_pskel& /* cena */);

    // Constructor.
    //
    pl4_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::areaType_pskel* area_parser_;
    ::vfp::basicIdAttrType_pskel* id_parser_;
    ::vfp::bpejCodeAttrType_pskel* kod_parser_;
    ::vfp::priceAttrType_pskel* cena_parser_;
  };

  class pl5_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    area ();

    virtual void
    id ();

    virtual void
    kod ();

    virtual void
    post_pl5 ();

    // Parser construction API.
    //
    void
    area_parser (::vfp::areaType_pskel&);

    void
    id_parser (::vfp::basicIdAttrType_pskel&);

    void
    kod_parser (::vfp::bpejCodeAttrType_pskel&);

    void
    parsers (::vfp::areaType_pskel& /* area */,
             ::vfp::basicIdAttrType_pskel& /* id */,
             ::vfp::bpejCodeAttrType_pskel& /* kod */);

    // Constructor.
    //
    pl5_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::areaType_pskel* area_parser_;
    ::vfp::basicIdAttrType_pskel* id_parser_;
    ::vfp::bpejCodeAttrType_pskel* kod_parser_;
  };

  class pa2_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    area ();

    virtual void
    bpej ();

    virtual void
    brem ();

    virtual void
    ochr ();

    virtual void
    por ();

    virtual void
    id ();

    virtual void
    kcpp ();

    virtual void
    pcpp ();

    virtual void
    dcpp ();

    virtual void
    kcp ();

    virtual void
    pcp ();

    virtual void
    dcp ();

    virtual void
    kk ();

    virtual void
    vym ();

    virtual void
    vzd ();

    virtual void
    dp ();

    virtual void
    zv ();

    virtual void
    res ();

    virtual void
    poz ();

    virtual void
    bu_id ();

    virtual void
    cir ();

    virtual void
    ps_id ();

    virtual void
    souc ();

    virtual void
    post_pa2 ();

    // Parser construction API.
    //
    void
    area_parser (::vfp::areaType_pskel&);

    void
    bpej_parser (::vfp::bpejCollectionType_pskel&);

    void
    brem_parser (::vfp::bremCollectionType_pskel&);

    void
    ochr_parser (::vfp::ochrType_pskel&);

    void
    por_parser (::vfp::porCollectionType_pskel&);

    void
    id_parser (::vfp::parcelIdAttrType_pskel&);

    void
    kcpp_parser (::vfp::parcelNumberAttrType_pskel&);

    void
    pcpp_parser (::vfp::poddeleniNumberAttrType_pskel&);

    void
    dcpp_parser (::vfp::druhCislovaniNumberAttrType_pskel&);

    void
    kcp_parser (::vfp::parcelNumberAttrType_pskel&);

    void
    pcp_parser (::vfp::poddeleniNumberAttrType_pskel&);

    void
    dcp_parser (::vfp::druhCislovaniNumberAttrType_pskel&);

    void
    kk_parser (::vfp::cadasterCodeType_pskel&);

    void
    vym_parser (::vfp::areaAttrType_pskel&);

    void
    vzd_parser (::vfp::distanceType_pskel&);

    void
    dp_parser (::vfp::kindOfAreaAttrType_pskel&);

    void
    zv_parser (::vfp::kindOfUseAttrType_pskel&);

    void
    res_parser (::vfp::resAttrType_pskel&);

    void
    poz_parser (::vfp::noteAttrType_pskel&);

    void
    bu_id_parser (::vfp::basicStringIdAttrType_pskel&);

    void
    cir_parser (::vfp::cirAttrType_pskel&);

    void
    ps_id_parser (::vfp::basicStringIdAttrType_pskel&);

    void
    souc_parser (::vfp::soucAttrType_pskel&);

    void
    parsers (::vfp::areaType_pskel& /* area */,
             ::vfp::bpejCollectionType_pskel& /* bpej */,
             ::vfp::bremCollectionType_pskel& /* brem */,
             ::vfp::ochrType_pskel& /* ochr */,
             ::vfp::porCollectionType_pskel& /* por */,
             ::vfp::parcelIdAttrType_pskel& /* id */,
             ::vfp::parcelNumberAttrType_pskel& /* kcpp */,
             ::vfp::poddeleniNumberAttrType_pskel& /* pcpp */,
             ::vfp::druhCislovaniNumberAttrType_pskel& /* dcpp */,
             ::vfp::parcelNumberAttrType_pskel& /* kcp */,
             ::vfp::poddeleniNumberAttrType_pskel& /* pcp */,
             ::vfp::druhCislovaniNumberAttrType_pskel& /* dcp */,
             ::vfp::cadasterCodeType_pskel& /* kk */,
             ::vfp::areaAttrType_pskel& /* vym */,
             ::vfp::distanceType_pskel& /* vzd */,
             ::vfp::kindOfAreaAttrType_pskel& /* dp */,
             ::vfp::kindOfUseAttrType_pskel& /* zv */,
             ::vfp::resAttrType_pskel& /* res */,
             ::vfp::noteAttrType_pskel& /* poz */,
             ::vfp::basicStringIdAttrType_pskel& /* bu_id */,
             ::vfp::cirAttrType_pskel& /* cir */,
             ::vfp::basicStringIdAttrType_pskel& /* ps_id */,
             ::vfp::soucAttrType_pskel& /* souc */);

    // Constructor.
    //
    pa2_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::areaType_pskel* area_parser_;
    ::vfp::bpejCollectionType_pskel* bpej_parser_;
    ::vfp::bremCollectionType_pskel* brem_parser_;
    ::vfp::ochrType_pskel* ochr_parser_;
    ::vfp::porCollectionType_pskel* por_parser_;
    ::vfp::parcelIdAttrType_pskel* id_parser_;
    ::vfp::parcelNumberAttrType_pskel* kcpp_parser_;
    ::vfp::poddeleniNumberAttrType_pskel* pcpp_parser_;
    ::vfp::druhCislovaniNumberAttrType_pskel* dcpp_parser_;
    ::vfp::parcelNumberAttrType_pskel* kcp_parser_;
    ::vfp::poddeleniNumberAttrType_pskel* pcp_parser_;
    ::vfp::druhCislovaniNumberAttrType_pskel* dcp_parser_;
    ::vfp::cadasterCodeType_pskel* kk_parser_;
    ::vfp::areaAttrType_pskel* vym_parser_;
    ::vfp::distanceType_pskel* vzd_parser_;
    ::vfp::kindOfAreaAttrType_pskel* dp_parser_;
    ::vfp::kindOfUseAttrType_pskel* zv_parser_;
    ::vfp::resAttrType_pskel* res_parser_;
    ::vfp::noteAttrType_pskel* poz_parser_;
    ::vfp::basicStringIdAttrType_pskel* bu_id_parser_;
    ::vfp::cirAttrType_pskel* cir_parser_;
    ::vfp::basicStringIdAttrType_pskel* ps_id_parser_;
    ::vfp::soucAttrType_pskel* souc_parser_;
  };

  class pa3_pskel: public ::xml_schema::complex_content
  {
    public:
    // Parser callbacks. Override them in your implementation.
    //
    // virtual void
    // pre ();

    virtual void
    gpar ();

    virtual void
    bpej ();

    virtual void
    por ();

    virtual void
    parid ();

    virtual void
    vymo ();

    virtual void
    vzd ();

    virtual void
    vymg ();

    virtual void
    poz ();

    virtual void
    cir ();

    virtual void
    post_pa3 ();

    // Parser construction API.
    //
    void
    gpar_parser (::vfp::gparType_pskel&);

    void
    bpej_parser (::vfp::claimBpejCollectionType_pskel&);

    void
    por_parser (::vfp::porCollectionType_pskel&);

    void
    parid_parser (::vfp::parcelIdAttrType_pskel&);

    void
    vymo_parser (::vfp::areaAttrType_pskel&);

    void
    vzd_parser (::vfp::distanceType_pskel&);

    void
    vymg_parser (::vfp::areaAttrType_pskel&);

    void
    poz_parser (::vfp::noteAttrType_pskel&);

    void
    cir_parser (::vfp::cirAttrType_pskel&);

    void
    parsers (::vfp::gparType_pskel& /* gpar */,
             ::vfp::claimBpejCollectionType_pskel& /* bpej */,
             ::vfp::porCollectionType_pskel& /* por */,
             ::vfp::parcelIdAttrType_pskel& /* parid */,
             ::vfp::areaAttrType_pskel& /* vymo */,
             ::vfp::distanceType_pskel& /* vzd */,
             ::vfp::areaAttrType_pskel& /* vymg */,
             ::vfp::noteAttrType_pskel& /* poz */,
             ::vfp::cirAttrType_pskel& /* cir */);

    // Constructor.
    //
    pa3_pskel ();

    // Implementation.
    //
    protected:
    virtual bool
    _start_element_impl (const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string&,
                         const ::xml_schema::ro_string*);

    virtual bool
    _end_element_impl (const ::xml_schema::ro_string&,
                       const ::xml_schema::ro_string&);

    virtual bool
    _attribute_impl (const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&,
                     const ::xml_schema::ro_string&);

    protected:
    ::vfp::gparType_pskel* gpar_parser_;
    ::vfp::claimBpejCollectionType_pskel* bpej_parser_;
    ::vfp::porCollectionType_pskel* por_parser_;
    ::vfp::parcelIdAttrType_pskel* parid_parser_;
    ::vfp::areaAttrType_pskel* vymo_parser_;
    ::vfp::distanceType_pskel* vzd_parser_;
    ::vfp::areaAttrType_pskel* vymg_parser_;
    ::vfp::noteAttrType_pskel* poz_parser_;
    ::vfp::cirAttrType_pskel* cir_parser_;
  };
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // VFP_3_1_PSKEL_HXX
